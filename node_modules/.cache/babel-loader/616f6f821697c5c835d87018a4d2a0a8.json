{"ast":null,"code":"import BigNumber from'bignumber.js';/**\n * Convert 10.999 to 10999000\n */export function toBaseUnitBN(rawAmt,decimals){var raw=new BigNumber(rawAmt);var base=new BigNumber(10);var decimalsBN=new BigNumber(decimals);return raw.times(base.pow(decimalsBN)).integerValue();}/**\n * Convert 10999000 to 10.999\n */export var toTokenUnitsBN=function toTokenUnitsBN(tokenAmount,tokenDecimals){var amt=new BigNumber(tokenAmount);var digits=new BigNumber(10).pow(new BigNumber(tokenDecimals));return amt.div(digits);};export var isPos=function isPos(amount){return!amount.isZero()&&amount.isPositive();};","map":{"version":3,"sources":["/Users/huanwen/Work/Cook/cook-frontend/src/utils/number.ts"],"names":["BigNumber","toBaseUnitBN","rawAmt","decimals","raw","base","decimalsBN","times","pow","integerValue","toTokenUnitsBN","tokenAmount","tokenDecimals","amt","digits","div","isPos","amount","isZero","isPositive"],"mappings":"AAAA,MAAOA,CAAAA,SAAP,KAAsB,cAAtB,CAEA;;GAGA,MAAO,SAASC,CAAAA,YAAT,CAAsBC,MAAtB,CAAwDC,QAAxD,CAAoF,CACzF,GAAMC,CAAAA,GAAG,CAAG,GAAIJ,CAAAA,SAAJ,CAAcE,MAAd,CAAZ,CACA,GAAMG,CAAAA,IAAI,CAAG,GAAIL,CAAAA,SAAJ,CAAc,EAAd,CAAb,CACA,GAAMM,CAAAA,UAAU,CAAG,GAAIN,CAAAA,SAAJ,CAAcG,QAAd,CAAnB,CACA,MAAOC,CAAAA,GAAG,CAACG,KAAJ,CAAUF,IAAI,CAACG,GAAL,CAASF,UAAT,CAAV,EAAgCG,YAAhC,EAAP,CACD,CAED;;GAGA,MAAO,IAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACC,WAAD,CAAsCC,aAAtC,CAA0E,CACtG,GAAMC,CAAAA,GAAG,CAAG,GAAIb,CAAAA,SAAJ,CAAcW,WAAd,CAAZ,CACA,GAAMG,CAAAA,MAAM,CAAG,GAAId,CAAAA,SAAJ,CAAc,EAAd,EAAkBQ,GAAlB,CAAsB,GAAIR,CAAAA,SAAJ,CAAcY,aAAd,CAAtB,CAAf,CACA,MAAOC,CAAAA,GAAG,CAACE,GAAJ,CAAQD,MAAR,CAAP,CACD,CAJM,CAMP,MAAO,IAAME,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,CAACC,MAAD,CAAgC,CACnD,MAAO,CAACA,MAAM,CAACC,MAAP,EAAD,EAAoBD,MAAM,CAACE,UAAP,EAA3B,CACD,CAFM","sourcesContent":["import BigNumber from 'bignumber.js';\n\n/**\n * Convert 10.999 to 10999000\n */\nexport function toBaseUnitBN(rawAmt:string| number| BigNumber, decimals: number):BigNumber {\n  const raw = new BigNumber(rawAmt);\n  const base = new BigNumber(10);\n  const decimalsBN = new BigNumber(decimals);\n  return raw.times(base.pow(decimalsBN)).integerValue();\n}\n\n/**\n * Convert 10999000 to 10.999\n */\nexport const toTokenUnitsBN = (tokenAmount:string|number|BigNumber, tokenDecimals:number): BigNumber => {\n  const amt = new BigNumber(tokenAmount);\n  const digits = new BigNumber(10).pow(new BigNumber(tokenDecimals));\n  return amt.div(digits);\n};\n\nexport const isPos = (amount: BigNumber): boolean => {\n  return !amount.isZero() && amount.isPositive();\n};\n"]},"metadata":{},"sourceType":"module"}