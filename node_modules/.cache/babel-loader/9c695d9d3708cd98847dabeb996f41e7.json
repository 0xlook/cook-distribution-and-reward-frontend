{"ast":null,"code":"var _jsxFileName = \"/Users/huanwen/Work/Cook/cook-frontend/src/components/Pool/index.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport _ from 'lodash';\nimport BigNumber from 'bignumber.js';\nimport { useViewport } from '@aragon/ui';\nimport { getPoolBalanceOfRewarded, getPoolBalanceOfVesting, getPoolBalanceOfClaimable, getPoolBalanceOfClaimed, getTokenBalance } from '../../utils/infura';\nimport { COOK, UNI, WETH } from \"../../constants/tokens\";\nimport { toTokenUnitsBN } from '../../utils/number';\nimport Claim from \"./Claim\";\nimport Harvest from \"./Harvest\";\nimport { Container, Row, Col } from 'react-grid-system';\nimport Span from \"../common/Span\";\nimport { BalanceBlock } from '../common/index';\n\nfunction Pool({\n  user,\n  poolAddress,\n  pools\n}) {\n  const {\n    override,\n    address\n  } = useParams();\n  const {\n    below\n  } = useViewport();\n\n  if (override) {\n    user = override;\n  }\n\n  if (address) {\n    poolAddress = address;\n  }\n\n  const [userTotalRewarded, setUserTotalRewarded] = useState(new BigNumber(0));\n  const [userTotalInVesting, setUserInTotalVesting] = useState(new BigNumber(0));\n  const [userTotalVested, setUserTotalVested] = useState(new BigNumber(0)); //Update User balances\n\n  useEffect(() => {\n    if (poolAddress === '') {\n      setUserTotalRewarded(new BigNumber(0));\n      setUserInTotalVesting(new BigNumber(0));\n      setUserTotalVested(new BigNumber(0));\n      return;\n    }\n\n    let isCancelled = false;\n\n    async function updatePoolInfo() {\n      const [pairBalanceCOOKStr, pairBalanceWETHStr] = await Promise.all([getTokenBalance(COOK.addr, UNI.addr), getTokenBalance(WETH.addr, UNI.addr)]);\n    }\n\n    updatePoolInfo();\n    const poolInfoId = setInterval(updatePoolInfo, 15000);\n\n    if (user === '') {\n      setUserTotalRewarded(new BigNumber(0));\n      setUserInTotalVesting(new BigNumber(0));\n      setUserTotalVested(new BigNumber(0));\n      return () => {\n        isCancelled = true;\n        clearInterval(poolInfoId);\n      };\n    }\n\n    async function updateUserInfo() {\n      const [userTotalRewardedStr, userTotalVestingStr, userTotalVestedStr, userTotalClaimedStr] = await Promise.all([getPoolBalanceOfRewarded(poolAddress, user), getPoolBalanceOfVesting(poolAddress, user), getPoolBalanceOfClaimable(poolAddress, user), getPoolBalanceOfClaimed(poolAddress, user)]);\n      const userTotalRewardedBalance = toTokenUnitsBN(userTotalRewardedStr, COOK.decimals);\n      const userTotalVestingBalance = toTokenUnitsBN(userTotalVestingStr, COOK.decimals);\n      const userTotalVestedBalance = toTokenUnitsBN(userTotalVestedStr, COOK.decimals);\n      const userTotalClaimedBalance = toTokenUnitsBN(userTotalClaimedStr, COOK.decimals);\n      const userTotalInVestingBalance = new BigNumber(userTotalVestingBalance).minus(new BigNumber(userTotalVestedBalance)).minus(new BigNumber(userTotalClaimedBalance));\n\n      if (!isCancelled) {\n        setUserTotalRewarded(new BigNumber(userTotalRewardedBalance));\n        setUserInTotalVesting(new BigNumber(userTotalInVestingBalance));\n        setUserTotalVested(new BigNumber(userTotalVestedBalance));\n      }\n    }\n\n    updateUserInfo();\n    const userInfoId = setInterval(updateUserInfo, 15000); // eslint-disable-next-line consistent-return\n\n    return () => {\n      isCancelled = true;\n      clearInterval(poolInfoId);\n      clearInterval(userInfoId);\n    };\n  }, [user, poolAddress]);\n  const poolList = [_.find(pools, {\n    'address': poolAddress\n  })];\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    style: {\n      textAlign: \"left\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    xs: 12,\n    lg: 6,\n    style: {\n      marginBottom: 15,\n      padding: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Span, {\n    label: poolAddress === \"\" ? \"No Pool Selected\" : poolList[0].name,\n    size: below(800) ? 16 : 22,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    xs: 6,\n    lg: 3,\n    style: {\n      margin: 'auto',\n      padding: 5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Harvest, {\n    user: user,\n    pools: poolList,\n    poolAddress: poolAddress,\n    userTotalRewarded: userTotalRewarded,\n    userTotalInVesting: userTotalInVesting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    xs: 6,\n    lg: 3,\n    style: {\n      margin: 'auto',\n      padding: 5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Claim, {\n    user: user,\n    pools: poolList,\n    poolAddress: poolAddress,\n    claimable: userTotalVested,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(Row, {\n    style: {\n      textAlign: \"left\",\n      marginTop: 30\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    xs: 12,\n    lg: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(BalanceBlock, {\n    asset: \"Total Staked\",\n    balance: userTotalRewarded,\n    suffix: \"UNI-V2\",\n    type: \"block\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    xs: 12,\n    md: 4,\n    lg: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(BalanceBlock, {\n    asset: \"To be Vested Tokens\",\n    balance: userTotalRewarded,\n    suffix: \"Cook\",\n    type: \"block\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    xs: 12,\n    md: 4,\n    lg: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(BalanceBlock, {\n    asset: \"Vesting Tokens\",\n    balance: userTotalInVesting,\n    suffix: \"Cook\",\n    type: \"block\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    xs: 12,\n    md: 4,\n    lg: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(BalanceBlock, {\n    asset: \"Vested Tokens\",\n    balance: userTotalVested,\n    suffix: \"Cook\",\n    type: \"block\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 11\n    }\n  }))));\n}\n\nexport default Pool;","map":{"version":3,"sources":["/Users/huanwen/Work/Cook/cook-frontend/src/components/Pool/index.tsx"],"names":["React","useState","useEffect","useParams","_","BigNumber","useViewport","getPoolBalanceOfRewarded","getPoolBalanceOfVesting","getPoolBalanceOfClaimable","getPoolBalanceOfClaimed","getTokenBalance","COOK","UNI","WETH","toTokenUnitsBN","Claim","Harvest","Container","Row","Col","Span","BalanceBlock","Pool","user","poolAddress","pools","override","address","below","userTotalRewarded","setUserTotalRewarded","userTotalInVesting","setUserInTotalVesting","userTotalVested","setUserTotalVested","isCancelled","updatePoolInfo","pairBalanceCOOKStr","pairBalanceWETHStr","Promise","all","addr","poolInfoId","setInterval","clearInterval","updateUserInfo","userTotalRewardedStr","userTotalVestingStr","userTotalVestedStr","userTotalClaimedStr","userTotalRewardedBalance","decimals","userTotalVestingBalance","userTotalVestedBalance","userTotalClaimedBalance","userTotalInVestingBalance","minus","userInfoId","poolList","find","textAlign","marginBottom","padding","name","margin","marginTop"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport _ from 'lodash'\nimport BigNumber from 'bignumber.js';\nimport {\n  useViewport\n} from '@aragon/ui';\nimport {\n  getPoolBalanceOfRewarded,\n  getPoolBalanceOfVesting,\n  getPoolBalanceOfClaimable,\n  getPoolBalanceOfClaimed,\n  getTokenBalance\n} from '../../utils/infura';\nimport { COOK, UNI, WETH } from \"../../constants/tokens\";\nimport { toTokenUnitsBN } from '../../utils/number';\nimport Claim from \"./Claim\";\nimport Harvest from \"./Harvest\";\n\nimport { Container, Row, Col } from 'react-grid-system';\nimport Span from \"../common/Span\";\nimport {\n  BalanceBlock\n} from '../common/index';\n\n\ntype PoolProps = {\n  pool: string, lockedUp: number, reward: BigNumber, staked: BigNumber, totalStaked: BigNumber\n};\n\nfunction Pool({ user, poolAddress, pools }: { user: string, poolAddress: string, pools: Array<PoolProps> }) {\n  const { override, address } = useParams();\n  const { below } = useViewport()\n  if (override) {\n    user = override;\n  }\n  if (address) {\n    poolAddress = address;\n  }\n\n\n  const [userTotalRewarded, setUserTotalRewarded] = useState(new BigNumber(0));\n  const [userTotalInVesting, setUserInTotalVesting] = useState(new BigNumber(0));\n  const [userTotalVested, setUserTotalVested] = useState(new BigNumber(0));\n\n\n  //Update User balances\n  useEffect(() => {\n    if (poolAddress === '') {\n      setUserTotalRewarded(new BigNumber(0));\n      setUserInTotalVesting(new BigNumber(0));\n      setUserTotalVested(new BigNumber(0));\n      return;\n    }\n\n    let isCancelled = false;\n\n    async function updatePoolInfo() {\n      const [\n        pairBalanceCOOKStr,\n        pairBalanceWETHStr,\n      ] = await Promise.all([\n        getTokenBalance(COOK.addr, UNI.addr),\n        getTokenBalance(WETH.addr, UNI.addr),\n      ]);\n\n    }\n\n    updatePoolInfo();\n    const poolInfoId = setInterval(updatePoolInfo, 15000);\n\n    if (user === '') {\n      setUserTotalRewarded(new BigNumber(0));\n      setUserInTotalVesting(new BigNumber(0));\n      setUserTotalVested(new BigNumber(0));\n      return () => {\n        isCancelled = true;\n        clearInterval(poolInfoId);\n      };\n    }\n\n    async function updateUserInfo() {\n      const [\n\n        userTotalRewardedStr,\n        userTotalVestingStr,\n        userTotalVestedStr,\n        userTotalClaimedStr,\n\n      ] = await Promise.all([\n        getPoolBalanceOfRewarded(poolAddress, user),\n        getPoolBalanceOfVesting(poolAddress, user),\n        getPoolBalanceOfClaimable(poolAddress, user),\n        getPoolBalanceOfClaimed(poolAddress, user),\n      ]);\n\n      const userTotalRewardedBalance = toTokenUnitsBN(userTotalRewardedStr, COOK.decimals);\n      const userTotalVestingBalance = toTokenUnitsBN(userTotalVestingStr, COOK.decimals);\n      const userTotalVestedBalance = toTokenUnitsBN(userTotalVestedStr, COOK.decimals);\n      const userTotalClaimedBalance = toTokenUnitsBN(userTotalClaimedStr, COOK.decimals);\n      const userTotalInVestingBalance = (new BigNumber(userTotalVestingBalance)).minus(new BigNumber(userTotalVestedBalance)).minus(new BigNumber(userTotalClaimedBalance));\n\n\n      if (!isCancelled) {\n        setUserTotalRewarded(new BigNumber(userTotalRewardedBalance));\n        setUserInTotalVesting(new BigNumber(userTotalInVestingBalance));\n        setUserTotalVested(new BigNumber(userTotalVestedBalance));\n      }\n    }\n\n    updateUserInfo();\n    const userInfoId = setInterval(updateUserInfo, 15000);\n\n    // eslint-disable-next-line consistent-return\n    return () => {\n      isCancelled = true;\n      clearInterval(poolInfoId);\n      clearInterval(userInfoId);\n    };\n  }, [user, poolAddress]);\n\n  const poolList = [_.find(pools, { 'address': poolAddress })]\n\n  return (\n    <Container>\n      <Row style={{ textAlign: \"left\" }}>\n        <Col xs={12} lg={6} style={{ marginBottom: 15, padding: 0 }}>\n          <Span label={poolAddress === \"\" ? \"No Pool Selected\" : poolList[0].name} size={below(800) ? 16 : 22} />\n        </Col>\n        <Col xs={6} lg={3} style={{ margin: 'auto', padding: 5 }}>\n          <Harvest\n            user={user}\n            pools={poolList}\n            poolAddress={poolAddress}\n            userTotalRewarded={userTotalRewarded}\n            userTotalInVesting={userTotalInVesting}\n          />\n        </Col>\n        <Col xs={6} lg={3} style={{ margin: 'auto', padding: 5 }}>\n          <Claim\n            user={user}\n            pools={poolList}\n            poolAddress={poolAddress}\n            claimable={userTotalVested}\n          />\n        </Col>\n      </Row>\n\n      <Row style={{ textAlign: \"left\", marginTop: 30 }}>\n        <Col xs={12} lg={5} >\n          <BalanceBlock asset=\"Total Staked\" balance={userTotalRewarded} suffix={\"UNI-V2\"} type={\"block\"} />\n\n        </Col>\n        <Col xs={12} md={4} lg={3} >\n          <BalanceBlock asset=\"To be Vested Tokens\" balance={userTotalRewarded} suffix={\"Cook\"} type={\"block\"} />\n        </Col>\n        <Col xs={12} md={4} lg={2} >\n          <BalanceBlock asset=\"Vesting Tokens\" balance={userTotalInVesting} suffix={\"Cook\"} type={\"block\"} />\n        </Col>\n        <Col xs={12} md={4} lg={2} >\n          <BalanceBlock asset=\"Vested Tokens\" balance={userTotalVested} suffix={\"Cook\"} type={\"block\"} />\n        </Col>\n\n      </Row>\n    </Container>\n  );\n}\n\nexport default Pool;\n"]},"metadata":{},"sourceType":"module"}