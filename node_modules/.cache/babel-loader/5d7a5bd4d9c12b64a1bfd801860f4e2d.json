{"ast":null,"code":"/* eslint-disable camelcase */\nimport Web3 from 'web3';\nimport BigNumber from 'bignumber.js';\nimport { notify } from './txNotifier.ts';\n\nconst poolAbi = require('../constants/abi/Pool.json');\n\nconst mockPoolAbi = require('../constants/abi/MockPool.json');\n\nconst distributionAbi = require('../constants/abi/TokenDistribution.json');\n\nconst dollarAbi = require('../constants/abi/Dollar.json');\n\nconst oracleAbi = require('../constants/abi/Oracle.json');\n\nconst priceComsumerAbi = require('../constants/abi/PriceConsumer.json');\n\nconst UINT256_MAX = '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff';\n/**\n * ERC20 Utilities\n */\n\nexport const approve = async (tokenAddr, spender, callback, amt = UINT256_MAX) => {\n  const account = await checkConnectedAndGetAddress();\n  const oToken = new window.web3.eth.Contract(dollarAbi, tokenAddr);\n  await oToken.methods.approve(spender, amt).send({\n    from: account\n  }).on('transactionHash', hash => {\n    notify.hash(hash);\n\n    if (callback) {\n      callback(hash);\n    }\n  });\n};\n/**\n * Connection Utilities\n */\n\nexport const updateModalMode = async theme => {\n  window.darkMode = theme === 'dark';\n};\nexport const connect = async () => {\n  window.web3 = new Web3(window.ethereum);\n  let addresses = await window.web3.eth.getAccounts();\n\n  if (!addresses.length) {\n    try {\n      addresses = await window.ethereum.enable();\n    } catch (e) {\n      console.log(e);\n      return false;\n    }\n  }\n\n  return addresses.length ? addresses[0].toLowerCase() : null;\n}; // eslint-disable-next-line consistent-return\n\nexport const checkConnectedAndGetAddress = async () => {\n  let addresses = await window.web3.eth.getAccounts();\n\n  if (!addresses.length) {\n    try {\n      addresses = await window.ethereum.enable(); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n\n  return addresses[0];\n};\n/**\n * Pool\n */\n\nexport const stake = async (pool, amount, callback) => {\n  const account = await checkConnectedAndGetAddress();\n  const poolContract = new window.web3.eth.Contract(poolAbi, pool);\n  await poolContract.methods.stake(new BigNumber(amount).toFixed()).send({\n    from: account\n  }).on('transactionHash', hash => {\n    notify.hash(hash);\n    callback(hash);\n  });\n};\nexport const unstake = async (pool, amount, callback) => {\n  const account = await checkConnectedAndGetAddress();\n  const poolContract = new window.web3.eth.Contract(poolAbi, pool);\n  await poolContract.methods.unstake(new BigNumber(amount).toFixed()).send({\n    from: account\n  }).on('transactionHash', hash => {\n    notify.hash(hash);\n    callback(hash);\n  });\n};\nexport const claim = async (pool, amount, callback) => {\n  const account = await checkConnectedAndGetAddress();\n  const poolContract = new window.web3.eth.Contract(poolAbi, pool);\n  await poolContract.methods.claim(new BigNumber(amount).toFixed()).send({\n    from: account\n  }).on('transactionHash', hash => {\n    notify.hash(hash);\n    callback(hash);\n  });\n};\nexport const zap = async (pool, amount, callback) => {\n  const account = await checkConnectedAndGetAddress();\n  const poolContract = new window.web3.eth.Contract(poolAbi, pool);\n  await poolContract.methods.zap(new BigNumber(amount).toFixed()).send({\n    from: account\n  }).on('transactionHash', hash => {\n    notify.hash(hash);\n    callback(hash);\n  });\n};\nexport const harvest = async (pool, amount, callback) => {\n  const account = await checkConnectedAndGetAddress();\n  const poolContract = new window.web3.eth.Contract(poolAbi, pool);\n  await poolContract.methods.harvest(new BigNumber(amount).toFixed()).send({\n    from: account\n  }).on('transactionHash', hash => {\n    notify.hash(hash);\n    callback(hash);\n  });\n}; // token distribution\n\nexport const withdraw = async (cookDistribution, amount) => {\n  const account = await checkConnectedAndGetAddress();\n  const distributionContract = new window.web3.eth.Contract(distributionAbi, cookDistribution);\n  await distributionContract.methods.withdraw(new BigNumber(amount).toFixed()).send({\n    from: account\n  }).on('transactionHash', hash => {\n    notify.hash(hash);\n  });\n};\nexport const getWithdrawRecords = async cookDistribution => {\n  const account = await checkConnectedAndGetAddress();\n  const distributionContract = new window.web3.eth.Contract(distributionAbi, cookDistribution);\n  const events = await distributionContract.getPastEvents('TokensWithdrawal', {\n    filter: {\n      userAddress: account\n    },\n    fromBlock: 0\n  });\n  return events;\n};\nexport const distributionZap = async (cookDistribution, poolAddress, amount, callback) => {\n  const account = await checkConnectedAndGetAddress();\n  const distributionContract = new window.web3.eth.Contract(distributionAbi, cookDistribution);\n  await distributionContract.methods.zap(new BigNumber(amount).toFixed(), poolAddress).send({\n    from: account\n  }).on('transactionHash', hash => {\n    notify.hash(hash);\n    callback(hash);\n  });\n};\n/** Admin functions (TESTING ONLY) */\n\nexport const setDay = async (cookDistribution, dayNumber) => {\n  const account = await checkConnectedAndGetAddress();\n  const distributionContract = new window.web3.eth.Contract(distributionAbi, cookDistribution);\n  await distributionContract.methods.setToday(new BigNumber(dayNumber)).send({\n    from: account\n  }).on('transactionHash', hash => {\n    notify.hash(hash);\n  });\n};\nexport const setCookPrice = async (oracle, price) => {\n  const account = await checkConnectedAndGetAddress();\n  const oracleContract = new window.web3.eth.Contract(oracleAbi, oracle);\n  await oracleContract.methods.set(new BigNumber(price)).send({\n    from: account\n  }).on('transactionHash', hash => {\n    notify.hash(hash);\n  });\n}; // deployer account only\n\nexport const updatePriceFeed = async cookDistribution => {\n  const account = await checkConnectedAndGetAddress();\n  const distributionContract = new window.web3.eth.Contract(distributionAbi, cookDistribution);\n  await distributionContract.methods.updatePriceFeed().send({\n    from: account\n  }).on('transactionHash', hash => {\n    notify.hash(hash);\n  });\n};\nexport const setWETHPrice = async (priceComsumer, price) => {\n  const account = await checkConnectedAndGetAddress();\n  const priceComsumerContract = new window.web3.eth.Contract(priceComsumerAbi, priceComsumer);\n  await priceComsumerContract.methods.set(new BigNumber(price)).send({\n    from: account\n  }).on('transactionHash', hash => {\n    notify.hash(hash);\n  });\n};\nexport const setPoolStakeLockupDuration = async (pool, lockupDays) => {\n  const account = await checkConnectedAndGetAddress();\n  const poolContract = new window.web3.eth.Contract(mockPoolAbi, pool);\n  await poolContract.methods.setStakeLockupDuration(new BigNumber(lockupDays).toFixed()).send({\n    from: account\n  }).on('transactionHash', hash => {\n    notify.hash(hash);\n  });\n};\nexport const setPoolRewardPerBlock = async (pool, rewards) => {\n  const account = await checkConnectedAndGetAddress();\n  const poolContract = new window.web3.eth.Contract(mockPoolAbi, pool);\n  await poolContract.methods.setRewardPerBlock(new BigNumber(rewards).toFixed()).send({\n    from: account\n  }).on('transactionHash', hash => {\n    notify.hash(hash);\n  });\n};\nexport const setPoolBlockNumber = async (pool, blockNumber) => {\n  const account = await checkConnectedAndGetAddress();\n  const poolContract = new window.web3.eth.Contract(mockPoolAbi, pool);\n  await poolContract.methods.setBlockNumber(new BigNumber(blockNumber).toFixed()).send({\n    from: account\n  }).on('transactionHash', hash => {\n    notify.hash(hash);\n  });\n};\nexport const setPoolBlockTimestamp = async (pool, blockTimestamp) => {\n  const account = await checkConnectedAndGetAddress();\n  const poolContract = new window.web3.eth.Contract(mockPoolAbi, pool);\n  await poolContract.methods.setBlockTimestamp(new BigNumber(blockTimestamp).toFixed()).send({\n    from: account\n  }).on('transactionHash', hash => {\n    notify.hash(hash);\n  });\n};","map":{"version":3,"sources":["/Users/huanwen/Work/cook-frontend/src/utils/web3.js"],"names":["Web3","BigNumber","notify","poolAbi","require","mockPoolAbi","distributionAbi","dollarAbi","oracleAbi","priceComsumerAbi","UINT256_MAX","approve","tokenAddr","spender","callback","amt","account","checkConnectedAndGetAddress","oToken","window","web3","eth","Contract","methods","send","from","on","hash","updateModalMode","theme","darkMode","connect","ethereum","addresses","getAccounts","length","enable","e","console","log","toLowerCase","stake","pool","amount","poolContract","toFixed","unstake","claim","zap","harvest","withdraw","cookDistribution","distributionContract","getWithdrawRecords","events","getPastEvents","filter","userAddress","fromBlock","distributionZap","poolAddress","setDay","dayNumber","setToday","setCookPrice","oracle","price","oracleContract","set","updatePriceFeed","setWETHPrice","priceComsumer","priceComsumerContract","setPoolStakeLockupDuration","lockupDays","setStakeLockupDuration","setPoolRewardPerBlock","rewards","setRewardPerBlock","setPoolBlockNumber","blockNumber","setBlockNumber","setPoolBlockTimestamp","blockTimestamp","setBlockTimestamp"],"mappings":"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","sourcesContent":["/* eslint-disable camelcase */\nimport Web3 from 'web3';\nimport BigNumber from 'bignumber.js';\n\nimport { notify } from './txNotifier.ts';\nconst poolAbi = require('../constants/abi/Pool.json');\nconst mockPoolAbi = require('../constants/abi/MockPool.json');\nconst distributionAbi = require('../constants/abi/TokenDistribution.json');\nconst dollarAbi = require('../constants/abi/Dollar.json');\nconst oracleAbi = require('../constants/abi/Oracle.json');\nconst priceComsumerAbi = require('../constants/abi/PriceConsumer.json');\nconst UINT256_MAX = '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff';\n\n\n/**\n * ERC20 Utilities\n */\n\nexport const approve = async (tokenAddr, spender, callback, amt = UINT256_MAX, ) => {\n  const account = await checkConnectedAndGetAddress();\n  const oToken = new window.web3.eth.Contract(dollarAbi, tokenAddr);\n  await oToken.methods\n    .approve(spender, amt)\n    .send({ from: account })\n    .on('transactionHash', (hash) => {\n      notify.hash(hash);\n      if (callback) {\n        callback(hash);\n      }\n    });\n};\n\n\n/**\n * Connection Utilities\n */\n\nexport const updateModalMode = async (theme) => {\n  window.darkMode = theme === 'dark';\n};\n\nexport const connect = async () => {\n  window.web3 = new Web3(window.ethereum);\n  let addresses = await window.web3.eth.getAccounts();\n  if (!addresses.length) {\n    try {\n      addresses = await window.ethereum.enable();\n    } catch (e) {\n      console.log(e);\n      return false;\n    }\n  }\n\n  return addresses.length ? addresses[0].toLowerCase() : null;\n};\n\n// eslint-disable-next-line consistent-return\nexport const checkConnectedAndGetAddress = async () => {\n  let addresses = await window.web3.eth.getAccounts();\n  if (!addresses.length) {\n    try {\n      addresses = await window.ethereum.enable();\n      // eslint-disable-next-line no-empty\n    } catch (e) { }\n  }\n\n  return addresses[0];\n};\n\n/**\n * Pool\n */\nexport const stake = async (pool, amount, callback) => {\n  const account = await checkConnectedAndGetAddress();\n  const poolContract = new window.web3.eth.Contract(poolAbi, pool);\n  await poolContract.methods\n    .stake(new BigNumber(amount).toFixed())\n    .send({\n      from: account,\n    })\n    .on('transactionHash', (hash) => {\n      notify.hash(hash);\n      callback(hash);\n    });\n};\n\nexport const unstake = async (pool, amount, callback) => {\n  const account = await checkConnectedAndGetAddress();\n  const poolContract = new window.web3.eth.Contract(poolAbi, pool);\n  await poolContract.methods\n    .unstake(new BigNumber(amount).toFixed())\n    .send({\n      from: account,\n    })\n    .on('transactionHash', (hash) => {\n      notify.hash(hash);\n      callback(hash);\n    });\n};\n\nexport const claim = async (pool, amount, callback) => {\n  const account = await checkConnectedAndGetAddress();\n  const poolContract = new window.web3.eth.Contract(poolAbi, pool);\n  await poolContract.methods\n    .claim(new BigNumber(amount).toFixed())\n    .send({\n      from: account,\n    })\n    .on('transactionHash', (hash) => {\n      notify.hash(hash);\n      callback(hash);\n    });\n};\n\nexport const zap = async (pool, amount, callback) => {\n  const account = await checkConnectedAndGetAddress();\n  const poolContract = new window.web3.eth.Contract(poolAbi, pool);\n  await poolContract.methods\n    .zap(new BigNumber(amount).toFixed())\n    .send({\n      from: account,\n    })\n    .on('transactionHash', (hash) => {\n      notify.hash(hash);\n      callback(hash);\n    });\n};\n\nexport const harvest = async (pool, amount, callback) => {\n  const account = await checkConnectedAndGetAddress();\n  const poolContract = new window.web3.eth.Contract(poolAbi, pool);\n  await poolContract.methods\n    .harvest(new BigNumber(amount).toFixed())\n    .send({\n      from: account,\n    })\n    .on('transactionHash', (hash) => {\n      notify.hash(hash);\n      callback(hash);\n    });\n};\n\n// token distribution\n\nexport const withdraw = async (cookDistribution, amount) => {\n  const account = await checkConnectedAndGetAddress();\n  const distributionContract = new window.web3.eth.Contract(distributionAbi, cookDistribution);\n  await distributionContract.methods\n    .withdraw(new BigNumber(amount).toFixed())\n    .send({\n      from: account,\n    })\n    .on('transactionHash', (hash) => {\n      notify.hash(hash);\n    });\n};\n\n\nexport const getWithdrawRecords = async (cookDistribution) => {\n  const account = await checkConnectedAndGetAddress();\n  const distributionContract = new window.web3.eth.Contract(distributionAbi, cookDistribution);\n  const events = await distributionContract.getPastEvents('TokensWithdrawal', {\n    filter: { userAddress:account },\n    fromBlock: 0,\n  });\n  return events;\n};\n\nexport const distributionZap = async (cookDistribution, poolAddress, amount, callback) => {\n  const account = await checkConnectedAndGetAddress();\n  const distributionContract = new window.web3.eth.Contract(distributionAbi, cookDistribution);\n  await distributionContract.methods\n    .zap(new BigNumber(amount).toFixed(),poolAddress)\n    .send({\n      from: account,\n    })\n    .on('transactionHash', (hash) => {\n      notify.hash(hash);\n      callback(hash);\n    });\n};\n\n\n/** Admin functions (TESTING ONLY) */\nexport const setDay = async (cookDistribution, dayNumber) => {\n  const account = await checkConnectedAndGetAddress();\n  const distributionContract = new window.web3.eth.Contract(distributionAbi, cookDistribution);\n  await distributionContract.methods\n    .setToday(new BigNumber(dayNumber))\n    .send({\n      from: account,\n    })\n    .on('transactionHash', (hash) => {\n      notify.hash(hash);\n    });\n};\n\nexport const setCookPrice = async (oracle, price) => {\n  const account = await checkConnectedAndGetAddress();\n  const oracleContract = new window.web3.eth.Contract(oracleAbi, oracle);\n  await oracleContract.methods\n    .set(new BigNumber(price))\n    .send({\n      from: account,\n    })\n    .on('transactionHash', (hash) => {\n      notify.hash(hash);\n    });\n};\n\n// deployer account only\nexport const updatePriceFeed = async (cookDistribution) => {\n  const account = await checkConnectedAndGetAddress();\n  const distributionContract = new window.web3.eth.Contract(distributionAbi, cookDistribution);\n  await distributionContract.methods\n    .updatePriceFeed()\n    .send({\n      from: account,\n    })\n    .on('transactionHash', (hash) => {\n      notify.hash(hash);\n    });\n};\n\nexport const setWETHPrice = async (priceComsumer, price) => {\n  const account = await checkConnectedAndGetAddress();\n  const priceComsumerContract = new window.web3.eth.Contract(priceComsumerAbi, priceComsumer);\n  await priceComsumerContract.methods\n    .set(new BigNumber(price))\n    .send({\n      from: account,\n    })\n    .on('transactionHash', (hash) => {\n      notify.hash(hash);\n    });\n};\n\nexport const setPoolStakeLockupDuration = async (pool, lockupDays) => {\n  const account = await checkConnectedAndGetAddress();\n  const poolContract = new window.web3.eth.Contract(mockPoolAbi, pool);\n  await poolContract.methods\n    .setStakeLockupDuration(new BigNumber(lockupDays).toFixed())\n    .send({\n      from: account,\n    })\n    .on('transactionHash', (hash) => {\n      notify.hash(hash);\n    });\n};\n\nexport const setPoolRewardPerBlock = async (pool, rewards) => {\n  const account = await checkConnectedAndGetAddress();\n  const poolContract = new window.web3.eth.Contract(mockPoolAbi, pool);\n  await poolContract.methods\n    .setRewardPerBlock(new BigNumber(rewards).toFixed())\n    .send({\n      from: account,\n    })\n    .on('transactionHash', (hash) => {\n      notify.hash(hash);\n    });\n};\n\nexport const setPoolBlockNumber = async (pool, blockNumber) => {\n  const account = await checkConnectedAndGetAddress();\n  const poolContract = new window.web3.eth.Contract(mockPoolAbi, pool);\n  await poolContract.methods\n    .setBlockNumber(new BigNumber(blockNumber).toFixed())\n    .send({\n      from: account,\n    })\n    .on('transactionHash', (hash) => {\n      notify.hash(hash);\n    });\n};\n\nexport const setPoolBlockTimestamp = async (pool, blockTimestamp) => {\n  const account = await checkConnectedAndGetAddress();\n  const poolContract = new window.web3.eth.Contract(mockPoolAbi, pool);\n  await poolContract.methods\n    .setBlockTimestamp(new BigNumber(blockTimestamp).toFixed())\n    .send({\n      from: account,\n    })\n    .on('transactionHash', (hash) => {\n      notify.hash(hash);\n    });\n};\n"]},"metadata":{},"sourceType":"module"}