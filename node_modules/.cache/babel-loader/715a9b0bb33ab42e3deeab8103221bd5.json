{"ast":null,"code":"import Web3 from 'web3';\n\nconst poolAbi = require('../constants/abi/Pool.json');\n\nconst mockPoolAbi = require('../constants/abi/MockPool.json');\n\nconst distributionAbi = require('../constants/abi/TokenDistribution.json');\n\nconst dollarAbi = require('../constants/abi/Dollar.json');\n\nconst priceComsumerAbi = require('../constants/abi/PriceConsumer.json'); // eslint-disable-next-line no-undef\n\n\nconst web3 = new Web3();\n/**\n *\n * @param {string} token address\n * @param {string} account address\n * @param {string} spender address\n * @return {Promise<string>}\n */\n\nexport const getTokenAllowance = async (token, account, spender) => {\n  const tokenContract = new web3.eth.Contract(dollarAbi, token);\n  return tokenContract.methods.allowance(account, spender).call();\n};\n/**\n *\n * @param {string} token address\n * @param {string} account address\n * @return {Promise<string>}\n */\n\nexport const getTokenBalance = async (token, account) => {\n  if (account === '') return '0';\n  const tokenContract = new web3.eth.Contract(dollarAbi, token);\n  return tokenContract.methods.balanceOf(account).call();\n}; // Pool\n\n/**\n *\n * @param {string} pool address\n * @return {Promise<string>}\n */\n\nexport const getTotalStaked = async pool => {\n  const poolContract = new web3.eth.Contract(poolAbi, pool);\n  return poolContract.methods.totalStaked().call();\n};\nexport const getStakeLockupDuration = async pool => {\n  const poolContract = new web3.eth.Contract(poolAbi, pool);\n  return poolContract.methods.getStakeLockupDuration().call();\n};\nexport const getRewardPerBlock = async pool => {\n  const poolContract = new web3.eth.Contract(poolAbi, pool);\n  return poolContract.methods.getRewardPerBlock().call();\n};\n/**\n *\n * @param {string} pool address\n * @param {string} account address\n * @return {Promise<string>}\n */\n\nexport const getPoolBalanceOfStaked = async (pool, account) => {\n  if (account === '') return '0';\n  const poolContract = new web3.eth.Contract(poolAbi, pool);\n  return poolContract.methods.balanceOfStaked(account).call();\n};\n/**\n *\n * @param {string} pool address\n * @param {string} account address\n * @return {Promise<string>}\n */\n\nexport const getPoolBalanceOfRewarded = async (pool, account) => {\n  if (account === '') return '0';\n  const poolContract = new web3.eth.Contract(poolAbi, pool);\n  return poolContract.methods.balanceOfRewarded(account).call();\n};\n/**\n *\n * @param {string} pool address\n * @param {string} account address\n * @return {Promise<string>}\n */\n\nexport const getPoolBalanceOfVesting = async (pool, account) => {\n  if (account === '') return '0';\n  const poolContract = new web3.eth.Contract(poolAbi, pool);\n  return poolContract.methods.balanceOfVesting(account).call();\n};\n/**\n *\n * @param {string} pool address\n * @param {string} account address\n * @return {Promise<string>}\n */\n\nexport const getPoolBalanceOfClaimable = async (pool, account) => {\n  if (account === '') return '0';\n  const poolContract = new web3.eth.Contract(poolAbi, pool);\n  return poolContract.methods.balanceOfClaimable(account).call();\n};\n/**\n *\n * @param {string} pool address\n * @param {string} account address\n * @return {Promise<string>}\n */\n\nexport const getPoolBalanceOfClaimed = async (pool, account) => {\n  if (account === '') return '0';\n  const poolContract = new web3.eth.Contract(poolAbi, pool);\n  return poolContract.methods.balanceOfClaimed(account).call();\n};\n/**\n *\n * @param {string} pool address\n * @param {string} account address\n * @return {Promise<string>}\n */\n\nexport const getPoolBalanceOfUnstakable = async (pool, account) => {\n  if (account === '') return '0';\n  const poolContract = new web3.eth.Contract(poolAbi, pool);\n  return poolContract.methods.balanceOfUnstakable(account).call();\n};\n/**\n *\n * @param {string} cookDistribution address\n * @param {string} account address\n * @return {Promise<string>}\n */\n\nexport const getDistributionVestingAmount = async (cookDistribution, account) => {\n  const distributionContract = new web3.eth.Contract(distributionAbi, cookDistribution);\n  return distributionContract.methods.getUserVestingAmount(account).call();\n};\n/**\n *\n * @param {string} cookDistribution address\n * @param {string} account address\n * @return {Promise<string>}\n */\n\nexport const getDistributionAvalibleAmount = async (cookDistribution, account) => {\n  const distributionContract = new web3.eth.Contract(distributionAbi, cookDistribution);\n  return distributionContract.methods.getUserAvailableAmount(account, 0).call();\n};\n/**\n *\n * @param {string} cookDistribution address\n * @param {string} account address\n * @return {Promise<string>}\n */\n\nexport const getDistributionVestedAmount = async (cookDistribution, account) => {\n  const distributionContract = new web3.eth.Contract(distributionAbi, cookDistribution);\n  return distributionContract.methods.getUserVestedAmount(account, 0).call();\n};\n/**\n *\n * @param {string} cookDistribution address\n * @return {Promise<string>}\n */\n\nexport const getDistributionStartTimestamp = async cookDistribution => {\n  const distributionContract = new web3.eth.Contract(distributionAbi, cookDistribution);\n  return distributionContract.methods.start().call();\n};\n/** Admin functions (TESTING ONLY) */\n\nexport const getTodayNumber = async cookDistribution => {\n  const distributionContract = new web3.eth.Contract(distributionAbi, cookDistribution);\n  return distributionContract.methods.today().call();\n};\nexport const getWETHPrice = async priceComsumer => {\n  const priceComsumerContract = new web3.eth.Contract(priceComsumerAbi, priceComsumer);\n  return priceComsumerContract.methods.getLatestPrice().call();\n}; // deployer account only\n\nexport const getSevenMAPrice = async cookDistribution => {\n  const distributionContract = new web3.eth.Contract(distributionAbi, cookDistribution);\n  return distributionContract.methods.getLatestSevenSMA().call();\n};\nexport const getBlockNumber = async pool => {\n  const poolContract = new web3.eth.Contract(mockPoolAbi, pool);\n  return poolContract.methods.blockNumberE().call();\n};\nexport const getBlockTimestamp = async pool => {\n  const poolContract = new web3.eth.Contract(mockPoolAbi, pool);\n  return poolContract.methods.blockTimestampE().call();\n};","map":{"version":3,"sources":["/Users/huanwen/Work/Cook/cook-frontend/src/utils/infura.js"],"names":["Web3","poolAbi","require","mockPoolAbi","distributionAbi","dollarAbi","priceComsumerAbi","web3","getTokenAllowance","token","account","spender","tokenContract","eth","Contract","methods","allowance","call","getTokenBalance","balanceOf","getTotalStaked","pool","poolContract","totalStaked","getStakeLockupDuration","getRewardPerBlock","getPoolBalanceOfStaked","balanceOfStaked","getPoolBalanceOfRewarded","balanceOfRewarded","getPoolBalanceOfVesting","balanceOfVesting","getPoolBalanceOfClaimable","balanceOfClaimable","getPoolBalanceOfClaimed","balanceOfClaimed","getPoolBalanceOfUnstakable","balanceOfUnstakable","getDistributionVestingAmount","cookDistribution","distributionContract","getUserVestingAmount","getDistributionAvalibleAmount","getUserAvailableAmount","getDistributionVestedAmount","getUserVestedAmount","getDistributionStartTimestamp","start","getTodayNumber","today","getWETHPrice","priceComsumer","priceComsumerContract","getLatestPrice","getSevenMAPrice","getLatestSevenSMA","getBlockNumber","blockNumberE","getBlockTimestamp","blockTimestampE"],"mappings":"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","sourcesContent":["import Web3 from 'web3';\n\nconst poolAbi = require('../constants/abi/Pool.json');\nconst mockPoolAbi = require('../constants/abi/MockPool.json');\nconst distributionAbi = require('../constants/abi/TokenDistribution.json');\nconst dollarAbi = require('../constants/abi/Dollar.json');\nconst priceComsumerAbi = require('../constants/abi/PriceConsumer.json');\n\n// eslint-disable-next-line no-undef\nconst web3 = new Web3();\n\n/**\n *\n * @param {string} token address\n * @param {string} account address\n * @param {string} spender address\n * @return {Promise<string>}\n */\nexport const getTokenAllowance = async (token, account, spender) => {\n  const tokenContract = new web3.eth.Contract(dollarAbi, token);\n  return tokenContract.methods.allowance(account, spender).call();\n};\n\n/**\n *\n * @param {string} token address\n * @param {string} account address\n * @return {Promise<string>}\n */\nexport const getTokenBalance = async (token, account) => {\n  if (account === '') return '0';\n  const tokenContract = new web3.eth.Contract(dollarAbi, token);\n  return tokenContract.methods.balanceOf(account).call();\n};\n\n// Pool\n/**\n *\n * @param {string} pool address\n * @return {Promise<string>}\n */\nexport const getTotalStaked = async (pool) => {\n  const poolContract = new web3.eth.Contract(poolAbi, pool);\n  return poolContract.methods.totalStaked().call();\n};\n\nexport const getStakeLockupDuration = async (pool) => {\n  const poolContract = new web3.eth.Contract(poolAbi, pool);\n  return poolContract.methods.getStakeLockupDuration().call();\n};\n\nexport const getRewardPerBlock = async (pool) => {\n  const poolContract = new web3.eth.Contract(poolAbi, pool);\n  return poolContract.methods.getRewardPerBlock().call();\n};\n\n/**\n *\n * @param {string} pool address\n * @param {string} account address\n * @return {Promise<string>}\n */\nexport const getPoolBalanceOfStaked = async (pool, account) => {\n  if (account === '') return '0';\n  const poolContract = new web3.eth.Contract(poolAbi, pool);\n  return poolContract.methods.balanceOfStaked(account).call();\n};\n\n/**\n *\n * @param {string} pool address\n * @param {string} account address\n * @return {Promise<string>}\n */\nexport const getPoolBalanceOfRewarded = async (pool, account) => {\n  if (account === '') return '0';\n  const poolContract = new web3.eth.Contract(poolAbi, pool);\n  return poolContract.methods.balanceOfRewarded(account).call();\n};\n\n/**\n *\n * @param {string} pool address\n * @param {string} account address\n * @return {Promise<string>}\n */\nexport const getPoolBalanceOfVesting = async (pool, account) => {\n  if (account === '') return '0';\n  const poolContract = new web3.eth.Contract(poolAbi, pool);\n  return poolContract.methods.balanceOfVesting(account).call();\n};\n\n/**\n *\n * @param {string} pool address\n * @param {string} account address\n * @return {Promise<string>}\n */\nexport const getPoolBalanceOfClaimable = async (pool, account) => {\n  if (account === '') return '0';\n  const poolContract = new web3.eth.Contract(poolAbi, pool);\n  return poolContract.methods.balanceOfClaimable(account).call();\n};\n\n/**\n *\n * @param {string} pool address\n * @param {string} account address\n * @return {Promise<string>}\n */\nexport const getPoolBalanceOfClaimed = async (pool, account) => {\n  if (account === '') return '0';\n  const poolContract = new web3.eth.Contract(poolAbi, pool);\n  return poolContract.methods.balanceOfClaimed(account).call();\n};\n\n/**\n *\n * @param {string} pool address\n * @param {string} account address\n * @return {Promise<string>}\n */\nexport const getPoolBalanceOfUnstakable = async (pool, account) => {\n  if (account === '') return '0';\n  const poolContract = new web3.eth.Contract(poolAbi, pool);\n  return poolContract.methods.balanceOfUnstakable(account).call();\n};\n\n/**\n *\n * @param {string} cookDistribution address\n * @param {string} account address\n * @return {Promise<string>}\n */\nexport const getDistributionVestingAmount = async (cookDistribution, account) => {\n  const distributionContract = new web3.eth.Contract(distributionAbi, cookDistribution);\n  return distributionContract.methods.getUserVestingAmount(account).call();\n};\n\n/**\n *\n * @param {string} cookDistribution address\n * @param {string} account address\n * @return {Promise<string>}\n */\nexport const getDistributionAvalibleAmount = async (cookDistribution, account) => {\n  const distributionContract = new web3.eth.Contract(distributionAbi, cookDistribution);\n  return distributionContract.methods.getUserAvailableAmount(account,0).call();\n};\n\n/**\n *\n * @param {string} cookDistribution address\n * @param {string} account address\n * @return {Promise<string>}\n */\nexport const getDistributionVestedAmount = async (cookDistribution, account) => {\n  const distributionContract = new web3.eth.Contract(distributionAbi, cookDistribution);\n  return distributionContract.methods.getUserVestedAmount(account,0).call();\n};\n\n\n\n/**\n *\n * @param {string} cookDistribution address\n * @return {Promise<string>}\n */\nexport const getDistributionStartTimestamp = async (cookDistribution) => {\n  const distributionContract = new web3.eth.Contract(distributionAbi, cookDistribution);\n  return distributionContract.methods.start().call();\n};\n\n\n\n/** Admin functions (TESTING ONLY) */\nexport const getTodayNumber = async (cookDistribution) => {\n  const distributionContract = new web3.eth.Contract(distributionAbi, cookDistribution);\n  return distributionContract.methods.today().call();\n};\n\n\nexport const getWETHPrice = async (priceComsumer) => {\n  const priceComsumerContract = new web3.eth.Contract(priceComsumerAbi, priceComsumer);\n  return priceComsumerContract.methods.getLatestPrice().call();\n};\n\n// deployer account only\nexport const getSevenMAPrice = async (cookDistribution) => {\n  const distributionContract = new web3.eth.Contract(distributionAbi, cookDistribution);\n  return distributionContract.methods.getLatestSevenSMA().call();\n};\n\nexport const getBlockNumber = async (pool) => {\n  const poolContract = new web3.eth.Contract(mockPoolAbi, pool);\n  return poolContract.methods.blockNumberE().call();\n};\n\nexport const getBlockTimestamp = async (pool) => {\n  const poolContract = new web3.eth.Contract(mockPoolAbi, pool);\n  return poolContract.methods.blockTimestampE().call();\n};\n"]},"metadata":{},"sourceType":"module"}