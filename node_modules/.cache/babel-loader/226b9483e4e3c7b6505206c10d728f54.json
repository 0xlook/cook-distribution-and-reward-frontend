{"ast":null,"code":"var _jsxFileName = \"/Users/huanwen/Work/cook-frontend/src/components/Pool/index.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport BigNumber from 'bignumber.js';\nimport { getStakeLockupDuration, getTotalStaked, getPoolBalanceOfStaked, getPoolBalanceOfUnstakable, getPoolBalanceOfRewarded, getPoolBalanceOfVesting, getPoolBalanceOfClaimable, getPoolBalanceOfClaimed, getTokenAllowance, getTokenBalance } from '../../utils/infura';\nimport { COOK, UNI, WETH } from \"../../constants/tokens\";\nimport { toTokenUnitsBN } from '../../utils/number';\nimport Unstake from \"./Unstake\";\nimport Stake from \"./Stake\";\nimport Claim from \"./Claim\";\nimport Harvest from \"./Harvest\";\nimport PoolPageHeader from \"./Header\";\nimport Zap from \"../Distribution/Zap\";\nimport { Row, Col } from 'react-grid-system';\nimport { BalanceBlock } from '../common/index';\n\nfunction Pool({\n  user,\n  poolAddress,\n  pools\n}) {\n  const {\n    override,\n    address\n  } = useParams();\n\n  if (override) {\n    user = override;\n  }\n\n  if (address) {\n    poolAddress = address;\n  }\n\n  const [pairBalanceCOOK, setPairBalanceCOOK] = useState(new BigNumber(0));\n  const [pairBalanceWETH, setPairBalanceWETH] = useState(new BigNumber(0));\n  const [stakeLockupDuration, setStakeLockupDuration] = useState(0);\n  const [totalStaked, setTotalStaked] = useState(new BigNumber(0));\n  const [userTotalStaked, setUserTotalStaked] = useState(new BigNumber(0));\n  const [userTotalUnstakable, setUserTotalUnstakable] = useState(new BigNumber(0));\n  const [userTotalLocked, setUserTotalLocked] = useState(new BigNumber(0));\n  const [userTotalRewarded, setUserTotalRewarded] = useState(new BigNumber(0));\n  const [userTotalInVesting, setUserInTotalVesting] = useState(new BigNumber(0));\n  const [userTotalVested, setUserTotalVested] = useState(new BigNumber(0));\n  const [userUNIAllowance, setUserUNIAllowance] = useState(new BigNumber(0));\n  const [userUNIBalance, setUserUNIBalance] = useState(new BigNumber(0));\n  const [userWETHBalance, setUserWETHBalance] = useState(new BigNumber(0));\n  const [userWETHAllowance, setUserWETHAllowance] = useState(new BigNumber(0)); //Update User balances\n\n  useEffect(() => {\n    if (poolAddress === '') {\n      setPairBalanceCOOK(new BigNumber(0));\n      setPairBalanceWETH(new BigNumber(0));\n      setTotalStaked(new BigNumber(0));\n      setUserTotalStaked(new BigNumber(0));\n      setUserTotalUnstakable(new BigNumber(0));\n      setUserTotalLocked(new BigNumber(0));\n      setUserTotalRewarded(new BigNumber(0));\n      setUserInTotalVesting(new BigNumber(0));\n      setUserTotalVested(new BigNumber(0));\n      setUserUNIAllowance(new BigNumber(0));\n      setUserUNIBalance(new BigNumber(0));\n      setUserWETHBalance(new BigNumber(0));\n      setUserWETHAllowance(new BigNumber(0));\n      return;\n    }\n\n    let isCancelled = false;\n\n    async function updatePoolInfo() {\n      const [pairBalanceCOOKStr, pairBalanceWETHStr, stakeLockupDuration, totalStakedStr] = await Promise.all([getTokenBalance(COOK.addr, UNI.addr), getTokenBalance(WETH.addr, UNI.addr), getStakeLockupDuration(poolAddress), getTotalStaked(poolAddress)]);\n      const pairCOOKBalance = toTokenUnitsBN(pairBalanceCOOKStr, COOK.decimals);\n      const pairWETHBalance = toTokenUnitsBN(pairBalanceWETHStr, WETH.decimals);\n      const totalStakedBalance = toTokenUnitsBN(totalStakedStr, UNI.decimals);\n\n      if (!isCancelled) {\n        setPairBalanceCOOK(new BigNumber(pairCOOKBalance));\n        setPairBalanceWETH(new BigNumber(pairWETHBalance));\n        setTotalStaked(new BigNumber(totalStakedBalance));\n        setStakeLockupDuration(stakeLockupDuration);\n      }\n    }\n\n    updatePoolInfo();\n    const poolInfoId = setInterval(updatePoolInfo, 15000);\n\n    if (user === '') {\n      setUserTotalStaked(new BigNumber(0));\n      setUserTotalUnstakable(new BigNumber(0));\n      setUserTotalLocked(new BigNumber(0));\n      setUserTotalRewarded(new BigNumber(0));\n      setUserInTotalVesting(new BigNumber(0));\n      setUserTotalVested(new BigNumber(0));\n      setUserUNIAllowance(new BigNumber(0));\n      setUserUNIBalance(new BigNumber(0));\n      setUserWETHBalance(new BigNumber(0));\n      setUserWETHAllowance(new BigNumber(0));\n      return () => {\n        isCancelled = true;\n        clearInterval(poolInfoId);\n      };\n    }\n\n    async function updateUserInfo() {\n      const [userTotalStakedStr, userTotalUnstakableStr, userTotalRewardedStr, userTotalVestingStr, userTotalVestedStr, userTotalClaimedStr, uniAllowance, uniBalance, wethAllowance, wethBalance] = await Promise.all([getPoolBalanceOfStaked(poolAddress, user), getPoolBalanceOfUnstakable(poolAddress, user), getPoolBalanceOfRewarded(poolAddress, user), getPoolBalanceOfVesting(poolAddress, user), getPoolBalanceOfClaimable(poolAddress, user), getPoolBalanceOfClaimed(poolAddress, user), getTokenAllowance(UNI.addr, user, poolAddress), getTokenBalance(UNI.addr, user), getTokenAllowance(WETH.addr, user, poolAddress), getTokenBalance(WETH.addr, user)]);\n      const userTotalStakedBalance = toTokenUnitsBN(userTotalStakedStr, UNI.decimals);\n      const userTotalUnstakableBalance = toTokenUnitsBN(userTotalUnstakableStr, UNI.decimals);\n      const userTotalLockedBalance = new BigNumber(userTotalStakedBalance).minus(new BigNumber(userTotalUnstakableBalance));\n      const userTotalRewardedBalance = toTokenUnitsBN(userTotalRewardedStr, COOK.decimals);\n      const userTotalVestingBalance = toTokenUnitsBN(userTotalVestingStr, COOK.decimals);\n      const userTotalVestedBalance = toTokenUnitsBN(userTotalVestedStr, COOK.decimals);\n      const userTotalClaimedBalance = toTokenUnitsBN(userTotalClaimedStr, COOK.decimals);\n      const userTotalInVestingBalance = new BigNumber(userTotalVestingBalance).minus(new BigNumber(userTotalVestedBalance)).minus(new BigNumber(userTotalClaimedBalance));\n      const userUNIBalance = toTokenUnitsBN(uniBalance, UNI.decimals);\n      const userWETHBalance = toTokenUnitsBN(wethBalance, WETH.decimals);\n\n      if (!isCancelled) {\n        setUserTotalStaked(new BigNumber(userTotalStakedBalance));\n        setUserTotalUnstakable(new BigNumber(userTotalUnstakableBalance));\n        setUserTotalLocked(new BigNumber(userTotalLockedBalance));\n        setUserTotalRewarded(new BigNumber(userTotalRewardedBalance));\n        setUserInTotalVesting(new BigNumber(userTotalInVestingBalance));\n        setUserTotalVested(new BigNumber(userTotalVestedBalance));\n        setUserUNIAllowance(new BigNumber(uniAllowance));\n        setUserUNIBalance(new BigNumber(userUNIBalance));\n        setUserWETHAllowance(new BigNumber(wethAllowance));\n        setUserWETHBalance(new BigNumber(userWETHBalance));\n      }\n    }\n\n    updateUserInfo();\n    const userInfoId = setInterval(updateUserInfo, 15000); // eslint-disable-next-line consistent-return\n\n    return () => {\n      isCancelled = true;\n      clearInterval(poolInfoId);\n      clearInterval(userInfoId);\n    };\n  }, [user, poolAddress]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(PoolPageHeader, {\n    stakeLockupDuration: stakeLockupDuration,\n    totalStaked: totalStaked,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Stake, {\n    user: user,\n    poolAddress: poolAddress,\n    balance: userUNIBalance,\n    allowance: userUNIAllowance,\n    staked: userTotalStaked,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Unstake, {\n    user: user,\n    poolAddress: poolAddress,\n    unstakable: userTotalUnstakable,\n    locked: userTotalLocked,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Harvest, {\n    user: user,\n    poolAddress: poolAddress,\n    userTotalRewarded: userTotalRewarded,\n    userTotalInVesting: userTotalInVesting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Claim, {\n    user: user,\n    poolAddress: poolAddress,\n    claimable: userTotalVested,\n    wethBalance: userWETHBalance,\n    wethAllowance: userWETHAllowance,\n    pairBalanceWETH: pairBalanceWETH,\n    pairBalanceCOOK: pairBalanceCOOK,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Zap, {\n    component: /*#__PURE__*/React.createElement(Col, {\n      xs: 12,\n      md: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      xs: 12,\n      md: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(BalanceBlock, {\n      asset: \"Claimable\",\n      balance: userTotalVested,\n      suffix: \"COOK\",\n      type: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      xs: 12,\n      md: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(BalanceBlock, {\n      asset: \"WETH Balance\",\n      balance: userWETHBalance,\n      suffix: \"WETH\",\n      type: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 33\n      }\n    })))),\n    user: user,\n    pools: pools,\n    cookAvailable: userTotalVested,\n    selected: poolAddress,\n    wethBalance: userWETHBalance,\n    wethAllowance: userWETHAllowance,\n    pairBalanceWETH: pairBalanceWETH,\n    pairBalanceCOOK: pairBalanceCOOK,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Pool;","map":{"version":3,"sources":["/Users/huanwen/Work/cook-frontend/src/components/Pool/index.tsx"],"names":["React","useState","useEffect","useParams","BigNumber","getStakeLockupDuration","getTotalStaked","getPoolBalanceOfStaked","getPoolBalanceOfUnstakable","getPoolBalanceOfRewarded","getPoolBalanceOfVesting","getPoolBalanceOfClaimable","getPoolBalanceOfClaimed","getTokenAllowance","getTokenBalance","COOK","UNI","WETH","toTokenUnitsBN","Unstake","Stake","Claim","Harvest","PoolPageHeader","Zap","Row","Col","BalanceBlock","Pool","user","poolAddress","pools","override","address","pairBalanceCOOK","setPairBalanceCOOK","pairBalanceWETH","setPairBalanceWETH","stakeLockupDuration","setStakeLockupDuration","totalStaked","setTotalStaked","userTotalStaked","setUserTotalStaked","userTotalUnstakable","setUserTotalUnstakable","userTotalLocked","setUserTotalLocked","userTotalRewarded","setUserTotalRewarded","userTotalInVesting","setUserInTotalVesting","userTotalVested","setUserTotalVested","userUNIAllowance","setUserUNIAllowance","userUNIBalance","setUserUNIBalance","userWETHBalance","setUserWETHBalance","userWETHAllowance","setUserWETHAllowance","isCancelled","updatePoolInfo","pairBalanceCOOKStr","pairBalanceWETHStr","totalStakedStr","Promise","all","addr","pairCOOKBalance","decimals","pairWETHBalance","totalStakedBalance","poolInfoId","setInterval","clearInterval","updateUserInfo","userTotalStakedStr","userTotalUnstakableStr","userTotalRewardedStr","userTotalVestingStr","userTotalVestedStr","userTotalClaimedStr","uniAllowance","uniBalance","wethAllowance","wethBalance","userTotalStakedBalance","userTotalUnstakableBalance","userTotalLockedBalance","minus","userTotalRewardedBalance","userTotalVestingBalance","userTotalVestedBalance","userTotalClaimedBalance","userTotalInVestingBalance","userInfoId"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport BigNumber from 'bignumber.js';\nimport {\n  getStakeLockupDuration,\n  getTotalStaked,\n  getPoolBalanceOfStaked,\n  getPoolBalanceOfUnstakable,\n  getPoolBalanceOfRewarded,\n  getPoolBalanceOfVesting,\n  getPoolBalanceOfClaimable,\n  getPoolBalanceOfClaimed,\n  getTokenAllowance,\n  getTokenBalance\n} from '../../utils/infura';\nimport {COOK, UNI, WETH} from \"../../constants/tokens\";\nimport { toTokenUnitsBN } from '../../utils/number';\nimport Unstake from \"./Unstake\";\nimport Stake from \"./Stake\";\nimport Claim from \"./Claim\";\nimport Harvest from \"./Harvest\";\nimport PoolPageHeader from \"./Header\";\nimport Zap from \"../Distribution/Zap\";\nimport { Container, Row, Col } from 'react-grid-system';\nimport {\n  BalanceBlock\n} from '../common/index';\n\n\ntype PoolProps = {\n  pool:string,lockedUp:number,reward:BigNumber,staked:BigNumber,totalStaked:BigNumber\n};\n\nfunction Pool({ user, poolAddress, pools }: {user: string, poolAddress: string, pools: Array<PoolProps>}) {\n  const { override, address } = useParams();\n  if (override) {\n    user = override;\n  }\n  if (address) {\n    poolAddress = address;\n  }\n\n  const [pairBalanceCOOK, setPairBalanceCOOK] = useState(new BigNumber(0));\n  const [pairBalanceWETH, setPairBalanceWETH] = useState(new BigNumber(0));\n  const [stakeLockupDuration, setStakeLockupDuration] = useState(0);\n  const [totalStaked, setTotalStaked] = useState(new BigNumber(0));\n  const [userTotalStaked, setUserTotalStaked] = useState(new BigNumber(0));\n  const [userTotalUnstakable, setUserTotalUnstakable] = useState(new BigNumber(0));\n  const [userTotalLocked, setUserTotalLocked] = useState(new BigNumber(0));\n  const [userTotalRewarded, setUserTotalRewarded] = useState(new BigNumber(0));\n  const [userTotalInVesting, setUserInTotalVesting] = useState(new BigNumber(0));\n  const [userTotalVested, setUserTotalVested] = useState(new BigNumber(0));\n  const [userUNIAllowance, setUserUNIAllowance] = useState(new BigNumber(0));\n  const [userUNIBalance, setUserUNIBalance] = useState(new BigNumber(0));\n  const [userWETHBalance, setUserWETHBalance] = useState(new BigNumber(0));\n  const [userWETHAllowance, setUserWETHAllowance] = useState(new BigNumber(0));\n\n  //Update User balances\n  useEffect(() => {\n    if (poolAddress === '') {\n      setPairBalanceCOOK(new BigNumber(0));\n      setPairBalanceWETH(new BigNumber(0));\n      setTotalStaked(new BigNumber(0));\n      setUserTotalStaked(new BigNumber(0));\n      setUserTotalUnstakable(new BigNumber(0));\n      setUserTotalLocked(new BigNumber(0));\n      setUserTotalRewarded(new BigNumber(0));\n      setUserInTotalVesting(new BigNumber(0));\n      setUserTotalVested(new BigNumber(0));\n      setUserUNIAllowance(new BigNumber(0));\n      setUserUNIBalance(new BigNumber(0));\n      setUserWETHBalance(new BigNumber(0));\n      setUserWETHAllowance(new BigNumber(0));\n      return;\n    }\n\n    let isCancelled = false;\n\n    async function updatePoolInfo() {\n      const [\n        pairBalanceCOOKStr,\n        pairBalanceWETHStr,\n        stakeLockupDuration,\n        totalStakedStr\n      ] = await Promise.all([\n        getTokenBalance(COOK.addr, UNI.addr),\n        getTokenBalance(WETH.addr, UNI.addr),\n        getStakeLockupDuration(poolAddress),\n        getTotalStaked(poolAddress)\n      ]);\n\n      const pairCOOKBalance = toTokenUnitsBN(pairBalanceCOOKStr, COOK.decimals);\n      const pairWETHBalance = toTokenUnitsBN(pairBalanceWETHStr, WETH.decimals);\n      const totalStakedBalance = toTokenUnitsBN(totalStakedStr, UNI.decimals);\n\n      if (!isCancelled) {\n        setPairBalanceCOOK(new BigNumber(pairCOOKBalance));\n        setPairBalanceWETH(new BigNumber(pairWETHBalance));\n        setTotalStaked(new BigNumber(totalStakedBalance));\n        setStakeLockupDuration(stakeLockupDuration);\n      }\n    }\n\n    updatePoolInfo();\n    const poolInfoId = setInterval(updatePoolInfo, 15000);\n\n    if (user === '') {\n      setUserTotalStaked(new BigNumber(0));\n      setUserTotalUnstakable(new BigNumber(0));\n      setUserTotalLocked(new BigNumber(0));\n      setUserTotalRewarded(new BigNumber(0));\n      setUserInTotalVesting(new BigNumber(0));\n      setUserTotalVested(new BigNumber(0));\n      setUserUNIAllowance(new BigNumber(0));\n      setUserUNIBalance(new BigNumber(0));\n      setUserWETHBalance(new BigNumber(0));\n      setUserWETHAllowance(new BigNumber(0));\n      return () => {\n        isCancelled = true;\n        clearInterval(poolInfoId);\n      };\n    }\n\n    async function updateUserInfo() {\n      const [\n        userTotalStakedStr,\n        userTotalUnstakableStr,\n        userTotalRewardedStr,\n        userTotalVestingStr,\n        userTotalVestedStr,\n        userTotalClaimedStr,\n        uniAllowance,\n        uniBalance,\n        wethAllowance,\n        wethBalance\n      ] = await Promise.all([\n        getPoolBalanceOfStaked(poolAddress, user),\n        getPoolBalanceOfUnstakable(poolAddress, user),\n        getPoolBalanceOfRewarded(poolAddress, user),\n        getPoolBalanceOfVesting(poolAddress, user),\n        getPoolBalanceOfClaimable(poolAddress, user),\n        getPoolBalanceOfClaimed(poolAddress, user),\n        getTokenAllowance(UNI.addr, user, poolAddress),\n        getTokenBalance(UNI.addr, user),\n        getTokenAllowance(WETH.addr, user, poolAddress),\n        getTokenBalance(WETH.addr, user),\n      ]);\n\n      const userTotalStakedBalance = toTokenUnitsBN(userTotalStakedStr, UNI.decimals);\n      const userTotalUnstakableBalance = toTokenUnitsBN(userTotalUnstakableStr, UNI.decimals);\n      const userTotalLockedBalance = (new BigNumber(userTotalStakedBalance)).minus(new BigNumber(userTotalUnstakableBalance));\n      const userTotalRewardedBalance = toTokenUnitsBN(userTotalRewardedStr, COOK.decimals);\n      const userTotalVestingBalance = toTokenUnitsBN(userTotalVestingStr, COOK.decimals);\n      const userTotalVestedBalance = toTokenUnitsBN(userTotalVestedStr, COOK.decimals);\n      const userTotalClaimedBalance = toTokenUnitsBN(userTotalClaimedStr, COOK.decimals);\n      const userTotalInVestingBalance = (new BigNumber(userTotalVestingBalance)).minus(new BigNumber(userTotalVestedBalance)).minus(new BigNumber(userTotalClaimedBalance));\n      const userUNIBalance = toTokenUnitsBN(uniBalance, UNI.decimals);\n      const userWETHBalance = toTokenUnitsBN(wethBalance, WETH.decimals);\n\n\n      if (!isCancelled) {\n        setUserTotalStaked(new BigNumber(userTotalStakedBalance));\n        setUserTotalUnstakable(new BigNumber(userTotalUnstakableBalance));\n        setUserTotalLocked(new BigNumber(userTotalLockedBalance));\n        setUserTotalRewarded(new BigNumber(userTotalRewardedBalance));\n        setUserInTotalVesting(new BigNumber(userTotalInVestingBalance));\n        setUserTotalVested(new BigNumber(userTotalVestedBalance));\n        setUserUNIAllowance(new BigNumber(uniAllowance));\n        setUserUNIBalance(new BigNumber(userUNIBalance));\n        setUserWETHAllowance(new BigNumber(wethAllowance));\n        setUserWETHBalance(new BigNumber(userWETHBalance));\n      }\n    }\n\n    updateUserInfo();\n    const userInfoId = setInterval(updateUserInfo, 15000);\n\n    // eslint-disable-next-line consistent-return\n    return () => {\n      isCancelled = true;\n      clearInterval(poolInfoId);\n      clearInterval(userInfoId);\n    };\n  }, [user, poolAddress]);\n\n  return (\n    <>\n      <PoolPageHeader\n        stakeLockupDuration={stakeLockupDuration}\n        totalStaked={totalStaked}\n      />\n\n      <Stake\n        user={user}\n        poolAddress={poolAddress}\n        balance={userUNIBalance}\n        allowance={userUNIAllowance}\n        staked={userTotalStaked}\n      />\n      <Unstake\n        user={user}\n        poolAddress={poolAddress}\n        unstakable={userTotalUnstakable}\n        locked={userTotalLocked}\n      />\n      <Harvest\n        user={user}\n        poolAddress={poolAddress}\n        userTotalRewarded={userTotalRewarded}\n        userTotalInVesting={userTotalInVesting}\n      />\n      <Claim\n        user={user}\n        poolAddress={poolAddress}\n        claimable={userTotalVested}\n        wethBalance={userWETHBalance}\n        wethAllowance={userWETHAllowance}\n        pairBalanceWETH={pairBalanceWETH}\n        pairBalanceCOOK={pairBalanceCOOK}\n      />\n      <Zap\n        component={\n          <Col xs={12} md={8}>\n            <Row>\n            <Col xs={12} md={6}><BalanceBlock asset=\"Claimable\" balance={userTotalVested} suffix={\"COOK\"} type={\"row\"}/></Col>\n            <Col xs={12} md={6}><BalanceBlock asset=\"WETH Balance\" balance={userWETHBalance} suffix={\"WETH\"} type={\"row\"}/></Col>\n            </Row>\n          </Col>}\n        user={user}\n        pools={pools}\n        cookAvailable={userTotalVested}\n        selected={poolAddress}\n        wethBalance={userWETHBalance}\n        wethAllowance={userWETHAllowance}\n        pairBalanceWETH={pairBalanceWETH}\n        pairBalanceCOOK={pairBalanceCOOK}\n      />\n    </>\n  );\n}\n\nexport default Pool;\n"]},"metadata":{},"sourceType":"module"}