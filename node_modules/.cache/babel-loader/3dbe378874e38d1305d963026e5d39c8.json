{"ast":null,"code":"var _jsxFileName = \"/Users/huanwen/Work/Cook/cook-frontend/src/components/Distribution/index.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport BigNumber from 'bignumber.js';\nimport { getDistributionVestingAmount, getDistributionVestedAmount, getDistributionAvalibleAmount, getDistributionStartTimestamp, getTodayNumber, getTokenAllowance, getTokenBalance, getStakeLockupDuration, getRewardPerBlock, getTotalStaked, getPoolBalanceOfStaked } from '../../utils/infura';\nimport { COOK, UNI, WETH } from \"../../constants/tokens\";\nimport { CookDistribution, POOLS } from \"../../constants/contracts\";\nimport { toTokenUnitsBN } from '../../utils/number';\nimport WithdrawPageHeader from \"./Header\";\nimport Withdraw from \"./Withdraw\";\nimport DistributionZap from \"./DistributionZap\";\nimport { Row, Col } from 'react-grid-system';\n\nfunction Distribution({\n  user\n}) {\n  const {\n    override\n  } = useParams();\n\n  if (override) {\n    user = override;\n  }\n\n  const [userWETHBalance, setUserWETHBalance] = useState(new BigNumber(0));\n  const [userWETHAllowance, setUserWETHAllowance] = useState(new BigNumber(0));\n  const [pairBalanceCOOK, setPairBalanceCOOK] = useState(new BigNumber(0));\n  const [pairBalanceWETH, setPairBalanceWETH] = useState(new BigNumber(0));\n  const [userVestingBalance, setUserVestingBalance] = useState(new BigNumber(0));\n  const [userVestedBalance, setUserVestedBalance] = useState(new BigNumber(0));\n  const [userAvalibleBalance, setUserAvalibleBalance] = useState(new BigNumber(0));\n  const [startDay, setStartDay] = useState(new BigNumber(0));\n  const [today, setToday] = useState(new BigNumber(0));\n  const [managedPools, setManagedPools] = useState([]); //Update User balances\n\n  useEffect(() => {\n    if (user === '') {\n      setUserVestingBalance(new BigNumber(0));\n      setUserVestedBalance(new BigNumber(0));\n      setUserAvalibleBalance(new BigNumber(0));\n      setPairBalanceCOOK(new BigNumber(0));\n      setPairBalanceWETH(new BigNumber(0));\n      setUserWETHBalance(new BigNumber(0));\n      setUserWETHAllowance(new BigNumber(0));\n      setStartDay(new BigNumber(0));\n      setToday(new BigNumber(0));\n      setManagedPools([]);\n      return;\n    }\n\n    let isCancelled = false;\n\n    async function updateUserInfo() {\n      const [vestingBalance, vestedBalance, avalibleBalance, startTimeStamp, tDay, pairBalanceCOOKStr, pairBalanceWETHStr, wethBalance, wethAllowance] = await Promise.all([getDistributionVestingAmount(CookDistribution, user), getDistributionVestedAmount(CookDistribution, user), getDistributionAvalibleAmount(CookDistribution, user), getDistributionStartTimestamp(CookDistribution), getTodayNumber(CookDistribution), getTokenBalance(COOK.addr, UNI.addr), getTokenBalance(WETH.addr, UNI.addr), getTokenBalance(WETH.addr, user), getTokenAllowance(WETH.addr, user, CookDistribution)]);\n      console.log('wethAllowance', wethAllowance);\n      const userVestingBalance = toTokenUnitsBN(vestingBalance, COOK.decimals);\n      const userVestedBalance = toTokenUnitsBN(vestedBalance, COOK.decimals);\n      const userAvalibleBalance = toTokenUnitsBN(avalibleBalance, COOK.decimals);\n      const startDay = new BigNumber(startTimeStamp).div(86400).decimalPlaces(0, 1);\n      const todayNumber = new BigNumber(tDay);\n      const pairCOOKBalance = toTokenUnitsBN(pairBalanceCOOKStr, COOK.decimals);\n      const pairWETHBalance = toTokenUnitsBN(pairBalanceWETHStr, WETH.decimals);\n      const userWETHBalance = toTokenUnitsBN(wethBalance, WETH.decimals);\n      const poolList = await Promise.all(POOLS.map(async pool => {\n        const [lockedup, reward, staked, totalStaked] = await Promise.all([getStakeLockupDuration(pool.address), getRewardPerBlock(pool.address), getTotalStaked(pool.address), getPoolBalanceOfStaked(pool.address, user)]);\n        const totalStakedBalance = toTokenUnitsBN(totalStaked, UNI.decimals);\n        const userTotalStakedBalance = toTokenUnitsBN(staked, UNI.decimals);\n        const poolRewardPerBlock = toTokenUnitsBN(reward, COOK.decimals);\n        return {\n          pool: pool.address,\n          lockedUp: lockedup,\n          reward: poolRewardPerBlock,\n          staked: userTotalStakedBalance,\n          totalStaked: totalStakedBalance,\n          name: pool.name,\n          address: pool.address,\n          lockedUpPeriod: lockedup,\n          rewardPerBlock: poolRewardPerBlock\n        };\n      }));\n\n      if (!isCancelled) {\n        setUserVestingBalance(new BigNumber(userVestingBalance));\n        setUserVestedBalance(new BigNumber(userVestedBalance));\n        setUserAvalibleBalance(new BigNumber(userAvalibleBalance));\n        setStartDay(new BigNumber(startDay));\n        setToday(new BigNumber(todayNumber));\n        setPairBalanceCOOK(new BigNumber(pairCOOKBalance));\n        setPairBalanceWETH(new BigNumber(pairWETHBalance));\n        setUserWETHBalance(new BigNumber(userWETHBalance));\n        setManagedPools(poolList);\n        console.log(wethAllowance);\n        setUserWETHAllowance(new BigNumber(wethAllowance));\n      }\n    }\n\n    updateUserInfo();\n    const id = setInterval(updateUserInfo, 1000); // eslint-disable-next-line consistent-return\n\n    return () => {\n      isCancelled = true;\n      clearInterval(id);\n    };\n  }, [user]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      fontWeight: 'bold',\n      fontSize: 40\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }\n  }, \"Cook Protocol\"), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginTop: 30,\n      marginBottom: 50,\n      fontSize: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }\n  }, \"Mobri.........\"), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      fontWeight: 'bold',\n      fontSize: 35\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }\n  }, \"Total Token 10,000,000 COOK\")), /*#__PURE__*/React.createElement(WithdrawPageHeader, {\n    accountVestingBalance: userVestingBalance,\n    accountAvalibleBalance: userAvalibleBalance,\n    accountVestedBalance: userVestedBalance,\n    todayNumber: today,\n    startDayNumber: startDay,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    xs: 6,\n    style: {\n      textAlign: \"right\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Withdraw, {\n    user: user,\n    vestingAmount: userVestingBalance,\n    availableAmount: userAvalibleBalance,\n    records: [],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    xs: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DistributionZap, {\n    user: user,\n    pools: managedPools,\n    cookAvailable: userAvalibleBalance,\n    wethBalance: userWETHBalance,\n    wethAllowance: userWETHAllowance,\n    pairBalanceWETH: pairBalanceWETH,\n    pairBalanceCOOK: pairBalanceCOOK,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 11\n    }\n  }))));\n}\n\nexport default Distribution;","map":{"version":3,"sources":["/Users/huanwen/Work/Cook/cook-frontend/src/components/Distribution/index.tsx"],"names":["React","useState","useEffect","useParams","BigNumber","getDistributionVestingAmount","getDistributionVestedAmount","getDistributionAvalibleAmount","getDistributionStartTimestamp","getTodayNumber","getTokenAllowance","getTokenBalance","getStakeLockupDuration","getRewardPerBlock","getTotalStaked","getPoolBalanceOfStaked","COOK","UNI","WETH","CookDistribution","POOLS","toTokenUnitsBN","WithdrawPageHeader","Withdraw","DistributionZap","Row","Col","Distribution","user","override","userWETHBalance","setUserWETHBalance","userWETHAllowance","setUserWETHAllowance","pairBalanceCOOK","setPairBalanceCOOK","pairBalanceWETH","setPairBalanceWETH","userVestingBalance","setUserVestingBalance","userVestedBalance","setUserVestedBalance","userAvalibleBalance","setUserAvalibleBalance","startDay","setStartDay","today","setToday","managedPools","setManagedPools","isCancelled","updateUserInfo","vestingBalance","vestedBalance","avalibleBalance","startTimeStamp","tDay","pairBalanceCOOKStr","pairBalanceWETHStr","wethBalance","wethAllowance","Promise","all","addr","console","log","decimals","div","decimalPlaces","todayNumber","pairCOOKBalance","pairWETHBalance","poolList","map","pool","lockedup","reward","staked","totalStaked","address","totalStakedBalance","userTotalStakedBalance","poolRewardPerBlock","lockedUp","name","lockedUpPeriod","rewardPerBlock","id","setInterval","clearInterval","textAlign","fontWeight","fontSize","marginTop","marginBottom"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport BigNumber from 'bignumber.js';\nimport {getDistributionVestingAmount,\n        getDistributionVestedAmount,\n        getDistributionAvalibleAmount,\n        getDistributionStartTimestamp,\n        getTodayNumber,\n        getTokenAllowance,\n        getTokenBalance,\n        getStakeLockupDuration,\n        getRewardPerBlock,\n        getTotalStaked,\n        getPoolBalanceOfStaked} from '../../utils/infura';\nimport {COOK, UNI, WETH} from \"../../constants/tokens\";\nimport {CookDistribution, POOLS} from \"../../constants/contracts\";\nimport { toTokenUnitsBN } from '../../utils/number';\nimport WithdrawPageHeader from \"./Header\";\nimport Withdraw from \"./Withdraw\";\nimport DistributionZap from \"./DistributionZap\";\nimport { Row, Col } from 'react-grid-system';\n\nfunction Distribution({ user }: {user: string}) {\n  const { override } = useParams();\n  if (override) {\n    user = override;\n  }\n\n  const [userWETHBalance, setUserWETHBalance] = useState(new BigNumber(0));\n  const [userWETHAllowance, setUserWETHAllowance] = useState(new BigNumber(0));\n\n  const [pairBalanceCOOK, setPairBalanceCOOK] = useState(new BigNumber(0));\n  const [pairBalanceWETH, setPairBalanceWETH] = useState(new BigNumber(0));\n\n\n  const [userVestingBalance, setUserVestingBalance] = useState(new BigNumber(0));\n  const [userVestedBalance, setUserVestedBalance] = useState(new BigNumber(0));\n  const [userAvalibleBalance, setUserAvalibleBalance] = useState(new BigNumber(0));\n\n  const [startDay, setStartDay] = useState(new BigNumber(0));\n  const [today, setToday] = useState(new BigNumber(0));\n  const [managedPools, setManagedPools] = useState([] as any);\n\n\n  //Update User balances\n  useEffect(() => {\n    if (user === '') {\n      setUserVestingBalance(new BigNumber(0));\n      setUserVestedBalance(new BigNumber(0));\n      setUserAvalibleBalance(new BigNumber(0));\n      setPairBalanceCOOK(new BigNumber(0));\n      setPairBalanceWETH(new BigNumber(0));\n      setUserWETHBalance(new BigNumber(0));\n      setUserWETHAllowance(new BigNumber(0));\n      setStartDay(new BigNumber(0));\n      setToday(new BigNumber(0));\n      setManagedPools([]);\n      return;\n    }\n    let isCancelled = false;\n\n    async function updateUserInfo() {\n      const [vestingBalance,\n             vestedBalance,\n             avalibleBalance,\n             startTimeStamp,\n             tDay,\n             pairBalanceCOOKStr,\n             pairBalanceWETHStr,\n             wethBalance,\n             wethAllowance\n           ] = await Promise.all([\n        getDistributionVestingAmount(CookDistribution, user),\n        getDistributionVestedAmount(CookDistribution, user),\n        getDistributionAvalibleAmount(CookDistribution, user),\n        getDistributionStartTimestamp(CookDistribution),\n        getTodayNumber(CookDistribution),\n        getTokenBalance(COOK.addr, UNI.addr),\n        getTokenBalance(WETH.addr, UNI.addr),\n        getTokenBalance(WETH.addr, user),\n        getTokenAllowance(WETH.addr, user, CookDistribution)\n      ]);\n      console.log('wethAllowance',wethAllowance);\n      const userVestingBalance = toTokenUnitsBN(vestingBalance, COOK.decimals);\n      const userVestedBalance = toTokenUnitsBN(vestedBalance, COOK.decimals);\n      const userAvalibleBalance = toTokenUnitsBN(avalibleBalance, COOK.decimals);\n      const startDay = new BigNumber(startTimeStamp).div(86400).decimalPlaces(0, 1);\n      const todayNumber = new BigNumber(tDay);\n\n      const pairCOOKBalance = toTokenUnitsBN(pairBalanceCOOKStr, COOK.decimals);\n      const pairWETHBalance = toTokenUnitsBN(pairBalanceWETHStr, WETH.decimals);\n      const userWETHBalance = toTokenUnitsBN(wethBalance, WETH.decimals);\n\n\n      const poolList = await Promise.all(POOLS.map( async (pool)=>{\n        const [lockedup,reward,staked,totalStaked] =\n        await Promise.all([\n            getStakeLockupDuration(pool.address),\n            getRewardPerBlock(pool.address),\n            getTotalStaked(pool.address),\n            getPoolBalanceOfStaked(pool.address,user)\n          ])\n\n        const totalStakedBalance = toTokenUnitsBN(totalStaked, UNI.decimals);\n        const userTotalStakedBalance = toTokenUnitsBN(staked, UNI.decimals);\n        const poolRewardPerBlock = toTokenUnitsBN(reward, COOK.decimals);\n\n\n        return({pool:pool.address,lockedUp:lockedup,reward:poolRewardPerBlock,staked:userTotalStakedBalance,totalStaked:totalStakedBalance,\n                name: pool.name,\n                address: pool.address,\n                lockedUpPeriod: lockedup,\n                rewardPerBlock: poolRewardPerBlock})\n      }))\n\n      if (!isCancelled) {\n        setUserVestingBalance(new BigNumber(userVestingBalance));\n        setUserVestedBalance(new BigNumber(userVestedBalance));\n        setUserAvalibleBalance(new BigNumber(userAvalibleBalance));\n        setStartDay(new BigNumber(startDay));\n        setToday(new BigNumber(todayNumber));\n\n        setPairBalanceCOOK(new BigNumber(pairCOOKBalance));\n        setPairBalanceWETH(new BigNumber(pairWETHBalance));\n        setUserWETHBalance(new BigNumber(userWETHBalance));\n        setManagedPools(poolList)\n        console.log(wethAllowance);\n        setUserWETHAllowance(new BigNumber(wethAllowance));\n      }\n    }\n    updateUserInfo();\n    const id = setInterval(updateUserInfo, 1000);\n\n    // eslint-disable-next-line consistent-return\n    return () => {\n      isCancelled = true;\n      clearInterval(id);\n    };\n  }, [user]);\n\n  return (\n    <>\n      <div style={{textAlign:\"center\"}}>\n      <div style={{fontWeight:'bold', fontSize:40}}>Cook Protocol</div>\n      <div style={{marginTop:30, marginBottom:50,fontSize:20}}>{\"Mobri.........\"}</div>\n      <div style={{fontWeight:'bold', fontSize:35}}>Total Token 10,000,000 COOK</div>\n      </div>\n      <WithdrawPageHeader\n        accountVestingBalance={userVestingBalance}\n        accountAvalibleBalance={userAvalibleBalance}\n        accountVestedBalance={userVestedBalance}\n        todayNumber={today}\n        startDayNumber={startDay}\n      />\n      <Row>\n        <Col xs={6} style={{textAlign:\"right\"}}>\n        <Withdraw\n          user={user}\n          vestingAmount={userVestingBalance}\n          availableAmount={userAvalibleBalance}\n          records={[]}\n        /></Col>\n        <Col xs={6} >\n          <DistributionZap\n            user={user}\n            pools={managedPools}\n            cookAvailable={userAvalibleBalance}\n            wethBalance={userWETHBalance}\n            wethAllowance={userWETHAllowance}\n            pairBalanceWETH={pairBalanceWETH}\n            pairBalanceCOOK={pairBalanceCOOK}\n          />\n        </Col>\n      </Row>\n\n\n\n\n    </>\n  );\n}\n\nexport default Distribution;\n"]},"metadata":{},"sourceType":"module"}