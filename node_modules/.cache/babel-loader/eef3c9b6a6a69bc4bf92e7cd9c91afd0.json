{"ast":null,"code":"import BigNumber from 'bignumber.js';\n/**\n * Convert 10.999 to 10999000\n */\n\nexport function toBaseUnitBN(rawAmt, decimals) {\n  const raw = new BigNumber(rawAmt);\n  const base = new BigNumber(10);\n  const decimalsBN = new BigNumber(decimals);\n  return raw.times(base.pow(decimalsBN)).integerValue();\n}\n/**\n * Convert 10999000 to 10.999\n */\n\nexport const toTokenUnitsBN = (tokenAmount, tokenDecimals) => {\n  const amt = new BigNumber(tokenAmount);\n  const digits = new BigNumber(10).pow(new BigNumber(tokenDecimals));\n  return amt.div(digits);\n};\nexport const isPos = amount => {\n  return !amount.isZero() && amount.isPositive();\n};","map":{"version":3,"sources":["/Users/huanwen/Work/Cook/cook-frontend/src/utils/number.ts"],"names":["BigNumber","toBaseUnitBN","rawAmt","decimals","raw","base","decimalsBN","times","pow","integerValue","toTokenUnitsBN","tokenAmount","tokenDecimals","amt","digits","div","isPos","amount","isZero","isPositive"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,cAAtB;AAEA;;;;AAGA,OAAO,SAASC,YAAT,CAAsBC,MAAtB,EAAwDC,QAAxD,EAAoF;AACzF,QAAMC,GAAG,GAAG,IAAIJ,SAAJ,CAAcE,MAAd,CAAZ;AACA,QAAMG,IAAI,GAAG,IAAIL,SAAJ,CAAc,EAAd,CAAb;AACA,QAAMM,UAAU,GAAG,IAAIN,SAAJ,CAAcG,QAAd,CAAnB;AACA,SAAOC,GAAG,CAACG,KAAJ,CAAUF,IAAI,CAACG,GAAL,CAASF,UAAT,CAAV,EAAgCG,YAAhC,EAAP;AACD;AAED;;;;AAGA,OAAO,MAAMC,cAAc,GAAG,CAACC,WAAD,EAAsCC,aAAtC,KAA0E;AACtG,QAAMC,GAAG,GAAG,IAAIb,SAAJ,CAAcW,WAAd,CAAZ;AACA,QAAMG,MAAM,GAAG,IAAId,SAAJ,CAAc,EAAd,EAAkBQ,GAAlB,CAAsB,IAAIR,SAAJ,CAAcY,aAAd,CAAtB,CAAf;AACA,SAAOC,GAAG,CAACE,GAAJ,CAAQD,MAAR,CAAP;AACD,CAJM;AAMP,OAAO,MAAME,KAAK,GAAIC,MAAD,IAAgC;AACnD,SAAO,CAACA,MAAM,CAACC,MAAP,EAAD,IAAoBD,MAAM,CAACE,UAAP,EAA3B;AACD,CAFM","sourcesContent":["import BigNumber from 'bignumber.js';\n\n/**\n * Convert 10.999 to 10999000\n */\nexport function toBaseUnitBN(rawAmt:string| number| BigNumber, decimals: number):BigNumber {\n  const raw = new BigNumber(rawAmt);\n  const base = new BigNumber(10);\n  const decimalsBN = new BigNumber(decimals);\n  return raw.times(base.pow(decimalsBN)).integerValue();\n}\n\n/**\n * Convert 10999000 to 10.999\n */\nexport const toTokenUnitsBN = (tokenAmount:string|number|BigNumber, tokenDecimals:number): BigNumber => {\n  const amt = new BigNumber(tokenAmount);\n  const digits = new BigNumber(10).pow(new BigNumber(tokenDecimals));\n  return amt.div(digits);\n};\n\nexport const isPos = (amount: BigNumber): boolean => {\n  return !amount.isZero() && amount.isPositive();\n};\n"]},"metadata":{},"sourceType":"module"}