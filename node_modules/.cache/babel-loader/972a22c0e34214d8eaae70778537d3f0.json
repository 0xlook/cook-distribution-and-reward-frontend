{"ast":null,"code":"var _jsxFileName = \"/Users/huanwen/Work/Cook/cook-frontend/src/components/CookPoolList/index.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getStakeLockupDuration, getRewardPerBlock, getTotalStaked, getPoolBalanceOfStaked, getPoolBalanceOfUnstakable, getPoolBalanceOfClaimable, getTokenAllowance, getTokenBalance } from '../../utils/infura';\nimport { useViewport } from '@aragon/ui';\nimport LinearText from \"../common/LinearText\";\nimport _ from 'lodash';\nimport { COOK_POOLS } from \"../../constants/contracts\";\nimport { toTokenUnitsBN } from '../../utils/number';\nimport { COOK } from \"../../constants/tokens\";\nimport Pool from \"../CookPool\";\nimport BigNumber from 'bignumber.js';\nimport ListTable from \"../PoolList/ListTable\";\nimport colors from '../../constants/colors';\nimport Unstake from \"../CookPool/Unstake\";\nimport Stake from \"../CookPool/Stake\";\nimport Zap from \"../CookPool/Zap\";\nimport { Row, Col } from 'react-grid-system';\n\nfunction CookPoolList({\n  user\n}) {\n  const {\n    override\n  } = useParams();\n\n  if (override) {\n    user = override;\n  }\n\n  const [poolList, setPoolList] = useState([]);\n  const [selectedPool, setSelectedPool] = useState('');\n  const [totalStaked, setTotalStaked] = useState(new BigNumber(0));\n  const {\n    below\n  } = useViewport();\n  const [userTotalStaked, setUserTotalStaked] = useState(new BigNumber(0));\n  const [userTotalUnstakable, setUserTotalUnstakable] = useState(new BigNumber(0));\n  const [userTotalLocked, setUserTotalLocked] = useState(new BigNumber(0));\n  const [userTotalVested, setUserTotalVested] = useState(new BigNumber(0));\n  const [userCookAllowance, setUserCookAllowance] = useState(new BigNumber(0));\n  const [userCookBalance, setUserCookBalance] = useState(new BigNumber(0));\n  useEffect(() => {\n    let isCancelled = false; // setPoolList([{name:\"4 UNI-V2 (WETH/COOK)\", address:\"0xf4B146FbA71F41E0592668ffbF264F1D186b2Ca8\",lockedUpPeriod:\"90 days\",rewardPerBlock:\"300\"}]);\n\n    async function updatePoolInfo() {\n      const poolList = await Promise.all(COOK_POOLS.map(async pool => {\n        const [lockedup, reward] = await Promise.all([getStakeLockupDuration(pool.address), getRewardPerBlock(pool.address)]);\n        const poolRewardPerBlock = toTokenUnitsBN(reward, COOK.decimals);\n        return {\n          name: pool.name,\n          address: pool.address,\n          lockedUpPeriod: lockedup,\n          rewardPerBlock: poolRewardPerBlock\n        };\n      }));\n      const totalStakedBalance = await COOK_POOLS.reduce(async (sum, pool) => {\n        const staked = await getTotalStaked(pool.address);\n        return (await sum).plus(staked);\n      }, Promise.resolve(new BigNumber(0)));\n      const totalStaked = toTokenUnitsBN(totalStakedBalance, COOK.decimals);\n\n      if (!isCancelled) {\n        setPoolList(poolList);\n        setTotalStaked(totalStaked);\n      }\n    }\n\n    updatePoolInfo();\n    const id = setInterval(updatePoolInfo, 15000); // eslint-disable-next-line consistent-return\n\n    return () => {\n      isCancelled = true;\n      clearInterval(id);\n    };\n  }, [user]);\n  useEffect(() => {\n    if (poolList && poolList[0] && !selectedPool) {\n      setSelectedPool(poolList[0].address);\n    }\n  }, [poolList]);\n  useEffect(() => {\n    if (selectedPool === '') {\n      setUserTotalStaked(new BigNumber(0));\n      setUserTotalUnstakable(new BigNumber(0));\n      setUserTotalLocked(new BigNumber(0));\n      setUserTotalVested(new BigNumber(0));\n      setUserCookAllowance(new BigNumber(0));\n      setUserCookBalance(new BigNumber(0));\n      return;\n    }\n\n    let isCancelled = false; // async function updatePoolInfo() {\n    //   const [\n    //     pairBalanceCOOKStr,\n    //     pairBalanceWETHStr,\n    //   ] = await Promise.all([\n    //     getTokenBalance(COOK.addr, UNI.addr),\n    //     getTokenBalance(WETH.addr, UNI.addr),\n    //   ]);\n    // }\n    // updatePoolInfo();\n    // const poolInfoId = setInterval(updatePoolInfo, 15000);\n\n    if (user === '') {\n      setUserTotalStaked(new BigNumber(0));\n      setUserTotalUnstakable(new BigNumber(0));\n      setUserTotalLocked(new BigNumber(0));\n      setUserTotalVested(new BigNumber(0));\n      setUserCookAllowance(new BigNumber(0));\n      setUserCookBalance(new BigNumber(0));\n      return () => {\n        isCancelled = true; // clearInterval(poolInfoId);\n      };\n    }\n\n    async function updateUserInfo() {\n      const [userTotalStakedStr, userTotalUnstakableStr, userTotalVestedStr, cookAllowance, cookBalance] = await Promise.all([getPoolBalanceOfStaked(selectedPool, user), getPoolBalanceOfUnstakable(selectedPool, user), getPoolBalanceOfClaimable(selectedPool, user), getTokenAllowance(COOK.addr, user, selectedPool), getTokenBalance(COOK.addr, user)]);\n      const userTotalStakedBalance = toTokenUnitsBN(userTotalStakedStr, COOK.decimals);\n      const userTotalUnstakableBalance = toTokenUnitsBN(userTotalUnstakableStr, COOK.decimals);\n      const userTotalLockedBalance = new BigNumber(userTotalStakedBalance).minus(new BigNumber(userTotalUnstakableBalance));\n      const userTotalVestedBalance = toTokenUnitsBN(userTotalVestedStr, COOK.decimals);\n      const userCookBalance = toTokenUnitsBN(cookBalance, COOK.decimals);\n\n      if (!isCancelled) {\n        setUserTotalStaked(new BigNumber(userTotalStakedBalance));\n        setUserTotalUnstakable(new BigNumber(userTotalUnstakableBalance));\n        setUserTotalLocked(new BigNumber(userTotalLockedBalance));\n        setUserTotalVested(new BigNumber(userTotalVestedBalance));\n        setUserCookAllowance(new BigNumber(cookAllowance));\n        setUserCookBalance(new BigNumber(userCookBalance));\n      }\n    }\n\n    updateUserInfo();\n    const userInfoId = setInterval(updateUserInfo, 15000); // eslint-disable-next-line consistent-return\n\n    return () => {\n      isCancelled = true; // clearInterval(poolInfoId);\n\n      clearInterval(userInfoId);\n    };\n  }, [user, selectedPool]);\n  const selectedPoolList = [_.find(poolList, {\n    'address': selectedPool\n  })];\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      padding: '2%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }\n  }, \"Cook mining\"), /*#__PURE__*/React.createElement(LinearText, {\n    text: \"Stake cook token, get cook token\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      padding: '20px 30px',\n      backgroundColor: colors.secondary,\n      width: \"100%\",\n      margin: \"30pt auto\",\n      textAlign: \"center\",\n      borderRadius: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ListTable, {\n    pools: poolList,\n    selectedPool: selectedPool,\n    setSelectedPool: selected => {\n      setSelectedPool(selected);\n    },\n    detailMode: true,\n    action: /*#__PURE__*/React.createElement(Row, {\n      style: {\n        textAlign: \"center\",\n        width: \"100%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      xs: 12,\n      xl: 4,\n      style: {\n        padding: '0 5px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Stake, {\n      pools: selectedPoolList,\n      user: user,\n      poolAddress: selectedPool,\n      balance: userCookBalance,\n      allowance: userCookAllowance,\n      staked: userTotalStaked,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      xs: 12,\n      xl: 4,\n      style: {\n        padding: '0 5px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Unstake, {\n      user: user,\n      pools: selectedPoolList,\n      poolAddress: selectedPool,\n      unstakable: userTotalUnstakable,\n      locked: userTotalLocked,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      xs: 12,\n      xl: 4,\n      style: {\n        padding: '0 5px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Zap, {\n      user: user,\n      pools: selectedPoolList,\n      cookAvailable: userTotalVested,\n      selected: selectedPool,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 15\n      }\n    }))),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Pool, {\n    user: user,\n    poolAddress: selectedPool,\n    pools: poolList,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default CookPoolList;","map":{"version":3,"sources":["/Users/huanwen/Work/Cook/cook-frontend/src/components/CookPoolList/index.tsx"],"names":["React","useState","useEffect","useParams","getStakeLockupDuration","getRewardPerBlock","getTotalStaked","getPoolBalanceOfStaked","getPoolBalanceOfUnstakable","getPoolBalanceOfClaimable","getTokenAllowance","getTokenBalance","useViewport","LinearText","_","COOK_POOLS","toTokenUnitsBN","COOK","Pool","BigNumber","ListTable","colors","Unstake","Stake","Zap","Row","Col","CookPoolList","user","override","poolList","setPoolList","selectedPool","setSelectedPool","totalStaked","setTotalStaked","below","userTotalStaked","setUserTotalStaked","userTotalUnstakable","setUserTotalUnstakable","userTotalLocked","setUserTotalLocked","userTotalVested","setUserTotalVested","userCookAllowance","setUserCookAllowance","userCookBalance","setUserCookBalance","isCancelled","updatePoolInfo","Promise","all","map","pool","lockedup","reward","address","poolRewardPerBlock","decimals","name","lockedUpPeriod","rewardPerBlock","totalStakedBalance","reduce","sum","staked","plus","resolve","id","setInterval","clearInterval","updateUserInfo","userTotalStakedStr","userTotalUnstakableStr","userTotalVestedStr","cookAllowance","cookBalance","addr","userTotalStakedBalance","userTotalUnstakableBalance","userTotalLockedBalance","minus","userTotalVestedBalance","userInfoId","selectedPoolList","find","padding","backgroundColor","secondary","width","margin","textAlign","borderRadius","selected"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport {\n  getStakeLockupDuration,\n  getRewardPerBlock,\n  getTotalStaked,\n  getPoolBalanceOfStaked,\n  getPoolBalanceOfUnstakable,\n  getPoolBalanceOfClaimable,\n  getTokenAllowance,\n  getTokenBalance\n} from '../../utils/infura';\nimport {\n  useViewport\n} from '@aragon/ui';\nimport LinearText from \"../common/LinearText\";\nimport _ from 'lodash'\nimport { COOK_POOLS } from \"../../constants/contracts\";\nimport { toTokenUnitsBN } from '../../utils/number';\nimport { COOK } from \"../../constants/tokens\";\nimport Pool from \"../CookPool\";\nimport BigNumber from 'bignumber.js';\nimport ListTable from \"../PoolList/ListTable\";\nimport colors from '../../constants/colors';\nimport Unstake from \"../CookPool/Unstake\";\nimport Stake from \"../CookPool/Stake\";\nimport Zap from \"../CookPool/Zap\";\nimport { Container, Row, Col } from 'react-grid-system';\n\nfunction CookPoolList({ user }: { user: string }) {\n  const { override } = useParams();\n  if (override) {\n    user = override;\n  }\n  const [poolList, setPoolList] = useState([] as any);\n  const [selectedPool, setSelectedPool] = useState('');\n  const [totalStaked, setTotalStaked] = useState(new BigNumber(0));\n  const { below } = useViewport()\n  const [userTotalStaked, setUserTotalStaked] = useState(new BigNumber(0));\n  const [userTotalUnstakable, setUserTotalUnstakable] = useState(new BigNumber(0));\n  const [userTotalLocked, setUserTotalLocked] = useState(new BigNumber(0));\n\n  const [userTotalVested, setUserTotalVested] = useState(new BigNumber(0));\n  const [userCookAllowance, setUserCookAllowance] = useState(new BigNumber(0));\n  const [userCookBalance, setUserCookBalance] = useState(new BigNumber(0));\n\n  useEffect(() => {\n    let isCancelled = false;\n\n    // setPoolList([{name:\"4 UNI-V2 (WETH/COOK)\", address:\"0xf4B146FbA71F41E0592668ffbF264F1D186b2Ca8\",lockedUpPeriod:\"90 days\",rewardPerBlock:\"300\"}]);\n    async function updatePoolInfo() {\n      const poolList = await Promise.all(COOK_POOLS.map(async (pool) => {\n        const [lockedup, reward] =\n          await Promise.all([\n            getStakeLockupDuration(pool.address),\n            getRewardPerBlock(pool.address)\n          ])\n        const poolRewardPerBlock = toTokenUnitsBN(reward, COOK.decimals);\n        return ({\n          name: pool.name,\n          address: pool.address,\n          lockedUpPeriod: lockedup,\n          rewardPerBlock: poolRewardPerBlock\n        });\n      }));\n      const totalStakedBalance = await COOK_POOLS.reduce(async (sum, pool) => {\n        const staked = await getTotalStaked(pool.address);\n        return (await sum).plus(staked);\n      }, Promise.resolve(new BigNumber(0)));\n\n      const totalStaked = toTokenUnitsBN(totalStakedBalance, COOK.decimals);\n\n      if (!isCancelled) {\n        setPoolList(poolList);\n        setTotalStaked(totalStaked);\n      }\n\n    }\n\n    updatePoolInfo();\n\n    const id = setInterval(updatePoolInfo, 15000);\n\n    // eslint-disable-next-line consistent-return\n    return () => {\n      isCancelled = true;\n      clearInterval(id);\n    };\n  }, [user]);\n\n  useEffect(() => {\n    if (poolList && poolList[0] && !selectedPool) {\n      setSelectedPool(poolList[0].address)\n    }\n  }, [poolList]);\n\n  useEffect(() => {\n    if (selectedPool === '') {\n\n      setUserTotalStaked(new BigNumber(0));\n      setUserTotalUnstakable(new BigNumber(0));\n      setUserTotalLocked(new BigNumber(0));\n      setUserTotalVested(new BigNumber(0));\n      setUserCookAllowance(new BigNumber(0));\n      setUserCookBalance(new BigNumber(0));\n      return;\n    }\n\n    let isCancelled = false;\n\n    // async function updatePoolInfo() {\n    //   const [\n    //     pairBalanceCOOKStr,\n    //     pairBalanceWETHStr,\n    //   ] = await Promise.all([\n    //     getTokenBalance(COOK.addr, UNI.addr),\n    //     getTokenBalance(WETH.addr, UNI.addr),\n    //   ]);\n\n\n\n    // }\n\n    // updatePoolInfo();\n    // const poolInfoId = setInterval(updatePoolInfo, 15000);\n\n    if (user === '') {\n      setUserTotalStaked(new BigNumber(0));\n      setUserTotalUnstakable(new BigNumber(0));\n      setUserTotalLocked(new BigNumber(0));\n\n      setUserTotalVested(new BigNumber(0));\n      setUserCookAllowance(new BigNumber(0));\n      setUserCookBalance(new BigNumber(0));\n      return () => {\n        isCancelled = true;\n        // clearInterval(poolInfoId);\n      };\n    }\n\n    async function updateUserInfo() {\n      const [\n        userTotalStakedStr,\n        userTotalUnstakableStr,\n        userTotalVestedStr,\n        cookAllowance,\n        cookBalance,\n      ] = await Promise.all([\n        getPoolBalanceOfStaked(selectedPool, user),\n        getPoolBalanceOfUnstakable(selectedPool, user),\n        getPoolBalanceOfClaimable(selectedPool, user),\n        getTokenAllowance(COOK.addr, user, selectedPool),\n        getTokenBalance(COOK.addr, user),\n      ]);\n      const userTotalStakedBalance = toTokenUnitsBN(userTotalStakedStr, COOK.decimals);\n      const userTotalUnstakableBalance = toTokenUnitsBN(userTotalUnstakableStr, COOK.decimals);\n      const userTotalLockedBalance = (new BigNumber(userTotalStakedBalance)).minus(new BigNumber(userTotalUnstakableBalance));\n      const userTotalVestedBalance = toTokenUnitsBN(userTotalVestedStr, COOK.decimals);\n      const userCookBalance = toTokenUnitsBN(cookBalance, COOK.decimals);\n\n\n      if (!isCancelled) {\n        setUserTotalStaked(new BigNumber(userTotalStakedBalance));\n        setUserTotalUnstakable(new BigNumber(userTotalUnstakableBalance));\n        setUserTotalLocked(new BigNumber(userTotalLockedBalance));\n        setUserTotalVested(new BigNumber(userTotalVestedBalance));\n        setUserCookAllowance(new BigNumber(cookAllowance));\n        setUserCookBalance(new BigNumber(userCookBalance));\n      }\n    }\n\n    updateUserInfo();\n    const userInfoId = setInterval(updateUserInfo, 15000);\n\n    // eslint-disable-next-line consistent-return\n    return () => {\n      isCancelled = true;\n      // clearInterval(poolInfoId);\n      clearInterval(userInfoId);\n    };\n  }, [user, selectedPool]);\n\n\n  const selectedPoolList = [_.find(poolList, { 'address': selectedPool })]\n  return (\n    <div style={{ padding: '2%' }}>\n      <div className=\"title\">Cook mining</div>\n      <LinearText text={\"Stake cook token, get cook token\"} />\n\n      <div style={{\n        padding: '20px 30px',\n        backgroundColor: colors.secondary, width: \"100%\",\n        margin: \"30pt auto\", textAlign: \"center\", borderRadius: 20\n      }}>\n        <ListTable pools={poolList} selectedPool={selectedPool} setSelectedPool={(selected) => {\n          setSelectedPool(selected)\n        }\n        } detailMode={true} action={\n          <Row style={{ textAlign: \"center\", width: \"100%\" }}>\n            <Col xs={12} xl={4} style={{ padding: '0 5px' }}>\n              <Stake\n                pools={selectedPoolList}\n                user={user}\n                poolAddress={selectedPool}\n                balance={userCookBalance}\n                allowance={userCookAllowance}\n                staked={userTotalStaked}\n              />\n            </Col><Col xs={12} xl={4} style={{ padding: '0 5px' }}>\n              <Unstake\n                user={user}\n                pools={selectedPoolList}\n                poolAddress={selectedPool}\n                unstakable={userTotalUnstakable}\n                locked={userTotalLocked}\n              />\n            </Col>\n            <Col xs={12} xl={4} style={{ padding: '0 5px' }}>\n              <Zap\n                user={user}\n                pools={selectedPoolList}\n                cookAvailable={userTotalVested}\n                selected={selectedPool}\n\n              />\n            </Col>\n          </Row>\n        } />\n        <Pool user={user} poolAddress={selectedPool} pools={poolList} />\n\n      </div>\n\n    </div >\n  );\n}\n\nexport default CookPoolList;\n"]},"metadata":{},"sourceType":"module"}