{"ast":null,"code":"var _jsxFileName = \"/Users/huanwen/Work/cook-frontend/src/components/Pool/index.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport BigNumber from 'bignumber.js';\nimport { getStakeLockupDuration, getTotalStaked, getPoolBalanceOfStaked, getPoolBalanceOfUnstakable, getPoolBalanceOfRewarded, getPoolBalanceOfVesting, getPoolBalanceOfClaimable, getPoolBalanceOfClaimed, getTokenAllowance, getTokenBalance } from '../../utils/infura';\nimport { COOK, UNI, WETH } from \"../../constants/tokens\";\nimport { toTokenUnitsBN } from '../../utils/number';\nimport Unstake from \"./Unstake\";\nimport Stake from \"./Stake\";\nimport Claim from \"./Claim\";\nimport Harvest from \"./Harvest\";\nimport PoolPageHeader from \"./Header\";\n\nfunction Pool({\n  user,\n  poolAddress\n}) {\n  const {\n    override,\n    address\n  } = useParams();\n\n  if (address) {\n    poolAddress = address;\n  }\n\n  const [pairBalanceCOOK, setPairBalanceCOOK] = useState(new BigNumber(0));\n  const [pairBalanceWETH, setPairBalanceWETH] = useState(new BigNumber(0));\n  const [stakeLockupDuration, setStakeLockupDuration] = useState(0);\n  const [totalStaked, setTotalStaked] = useState(new BigNumber(0));\n  const [userTotalStaked, setUserTotalStaked] = useState(new BigNumber(0));\n  const [userTotalUnstakable, setUserTotalUnstakable] = useState(new BigNumber(0));\n  const [userTotalLocked, setUserTotalLocked] = useState(new BigNumber(0));\n  const [userTotalRewarded, setUserTotalRewarded] = useState(new BigNumber(0));\n  const [userTotalInVesting, setUserInTotalVesting] = useState(new BigNumber(0));\n  const [userTotalVested, setUserTotalVested] = useState(new BigNumber(0));\n  const [userUNIAllowance, setUserUNIAllowance] = useState(new BigNumber(0));\n  const [userUNIBalance, setUserUNIBalance] = useState(new BigNumber(0));\n  const [userWETHBalance, setUserWETHBalance] = useState(new BigNumber(0));\n  const [userWETHAllowance, setUserWETHAllowance] = useState(new BigNumber(0)); //Update User balances\n\n  useEffect(() => {\n    if (poolAddress === '') {\n      setPairBalanceCOOK(new BigNumber(0));\n      setPairBalanceWETH(new BigNumber(0));\n      setTotalStaked(new BigNumber(0));\n      setUserTotalStaked(new BigNumber(0));\n      setUserTotalUnstakable(new BigNumber(0));\n      setUserTotalLocked(new BigNumber(0));\n      setUserTotalRewarded(new BigNumber(0));\n      setUserInTotalVesting(new BigNumber(0));\n      setUserTotalVested(new BigNumber(0));\n      setUserUNIAllowance(new BigNumber(0));\n      setUserUNIBalance(new BigNumber(0));\n      setUserWETHBalance(new BigNumber(0));\n      setUserWETHAllowance(new BigNumber(0));\n      return;\n    }\n\n    let isCancelled = false;\n\n    async function updatePoolInfo() {\n      const [pairBalanceCOOKStr, pairBalanceWETHStr, stakeLockupDuration, totalStakedStr] = await Promise.all([getTokenBalance(COOK.addr, UNI.addr), getTokenBalance(WETH.addr, UNI.addr), getStakeLockupDuration(poolAddress), getTotalStaked(poolAddress)]);\n      const pairCOOKBalance = toTokenUnitsBN(pairBalanceCOOKStr, COOK.decimals);\n      const pairWETHBalance = toTokenUnitsBN(pairBalanceWETHStr, WETH.decimals);\n      const totalStakedBalance = toTokenUnitsBN(totalStakedStr, UNI.decimals);\n\n      if (!isCancelled) {\n        setPairBalanceCOOK(new BigNumber(pairCOOKBalance));\n        setPairBalanceWETH(new BigNumber(pairWETHBalance));\n        setTotalStaked(new BigNumber(totalStakedBalance));\n        setStakeLockupDuration(stakeLockupDuration);\n      }\n    }\n\n    updatePoolInfo();\n    const poolInfoId = setInterval(updatePoolInfo, 1000);\n\n    if (user === '') {\n      setUserTotalStaked(new BigNumber(0));\n      setUserTotalUnstakable(new BigNumber(0));\n      setUserTotalLocked(new BigNumber(0));\n      setUserTotalRewarded(new BigNumber(0));\n      setUserInTotalVesting(new BigNumber(0));\n      setUserTotalVested(new BigNumber(0));\n      setUserUNIAllowance(new BigNumber(0));\n      setUserUNIBalance(new BigNumber(0));\n      setUserWETHBalance(new BigNumber(0));\n      setUserWETHAllowance(new BigNumber(0));\n      return () => {\n        isCancelled = true;\n        clearInterval(poolInfoId);\n      };\n    }\n\n    async function updateUserInfo() {\n      const [userTotalStakedStr, userTotalUnstakableStr, userTotalRewardedStr, userTotalVestingStr, userTotalVestedStr, userTotalClaimedStr, uniAllowance, uniBalance, wethAllowance, wethBalance] = await Promise.all([getPoolBalanceOfStaked(poolAddress, user), getPoolBalanceOfUnstakable(poolAddress, user), getPoolBalanceOfRewarded(poolAddress, user), getPoolBalanceOfVesting(poolAddress, user), getPoolBalanceOfClaimable(poolAddress, user), getPoolBalanceOfClaimed(poolAddress, user), getTokenAllowance(UNI.addr, user, poolAddress), getTokenBalance(UNI.addr, user), getTokenAllowance(WETH.addr, user, poolAddress), getTokenBalance(WETH.addr, user)]);\n      const userTotalStakedBalance = toTokenUnitsBN(userTotalStakedStr, UNI.decimals);\n      const userTotalUnstakableBalance = toTokenUnitsBN(userTotalUnstakableStr, UNI.decimals);\n      const userTotalLockedBalance = new BigNumber(userTotalStakedBalance).minus(new BigNumber(userTotalUnstakableBalance));\n      const userTotalRewardedBalance = toTokenUnitsBN(userTotalRewardedStr, COOK.decimals);\n      const userTotalVestingBalance = toTokenUnitsBN(userTotalVestingStr, COOK.decimals);\n      const userTotalVestedBalance = toTokenUnitsBN(userTotalVestedStr, COOK.decimals);\n      const userTotalClaimedBalance = toTokenUnitsBN(userTotalClaimedStr, COOK.decimals);\n      const userTotalInVestingBalance = new BigNumber(userTotalVestingBalance).minus(new BigNumber(userTotalVestedBalance)).minus(new BigNumber(userTotalClaimedBalance));\n      const userUNIBalance = toTokenUnitsBN(uniBalance, UNI.decimals);\n      const userWETHBalance = toTokenUnitsBN(wethBalance, WETH.decimals);\n\n      if (!isCancelled) {\n        setUserTotalStaked(new BigNumber(userTotalStakedBalance));\n        setUserTotalUnstakable(new BigNumber(userTotalUnstakableBalance));\n        setUserTotalLocked(new BigNumber(userTotalLockedBalance));\n        setUserTotalRewarded(new BigNumber(userTotalRewardedBalance));\n        setUserInTotalVesting(new BigNumber(userTotalInVestingBalance));\n        setUserTotalVested(new BigNumber(userTotalVestedBalance));\n        setUserUNIAllowance(new BigNumber(uniAllowance));\n        setUserUNIBalance(new BigNumber(userUNIBalance));\n        setUserWETHAllowance(new BigNumber(wethAllowance));\n        setUserWETHBalance(new BigNumber(userWETHBalance));\n      }\n    }\n\n    updateUserInfo();\n    const userInfoId = setInterval(updateUserInfo, 1000); // eslint-disable-next-line consistent-return\n\n    return () => {\n      isCancelled = true;\n      clearInterval(poolInfoId);\n      clearInterval(userInfoId);\n    };\n  }, [user, poolAddress]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(PoolPageHeader, {\n    stakeLockupDuration: stakeLockupDuration,\n    totalStaked: totalStaked,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Stake, {\n    user: user,\n    poolAddress: poolAddress,\n    balance: userUNIBalance,\n    allowance: userUNIAllowance,\n    staked: userTotalStaked,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Unstake, {\n    user: user,\n    poolAddress: poolAddress,\n    unstakable: userTotalUnstakable,\n    locked: userTotalLocked,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Harvest, {\n    user: user,\n    poolAddress: poolAddress,\n    userTotalRewarded: userTotalRewarded,\n    userTotalInVesting: userTotalInVesting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Claim, {\n    user: user,\n    poolAddress: poolAddress,\n    claimable: userTotalVested,\n    wethBalance: userWETHBalance,\n    wethAllowance: userWETHAllowance,\n    pairBalanceWETH: pairBalanceWETH,\n    pairBalanceCOOK: pairBalanceCOOK,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Pool;","map":{"version":3,"sources":["/Users/huanwen/Work/cook-frontend/src/components/Pool/index.tsx"],"names":["React","useState","useEffect","useParams","BigNumber","getStakeLockupDuration","getTotalStaked","getPoolBalanceOfStaked","getPoolBalanceOfUnstakable","getPoolBalanceOfRewarded","getPoolBalanceOfVesting","getPoolBalanceOfClaimable","getPoolBalanceOfClaimed","getTokenAllowance","getTokenBalance","COOK","UNI","WETH","toTokenUnitsBN","Unstake","Stake","Claim","Harvest","PoolPageHeader","Pool","user","poolAddress","override","address","pairBalanceCOOK","setPairBalanceCOOK","pairBalanceWETH","setPairBalanceWETH","stakeLockupDuration","setStakeLockupDuration","totalStaked","setTotalStaked","userTotalStaked","setUserTotalStaked","userTotalUnstakable","setUserTotalUnstakable","userTotalLocked","setUserTotalLocked","userTotalRewarded","setUserTotalRewarded","userTotalInVesting","setUserInTotalVesting","userTotalVested","setUserTotalVested","userUNIAllowance","setUserUNIAllowance","userUNIBalance","setUserUNIBalance","userWETHBalance","setUserWETHBalance","userWETHAllowance","setUserWETHAllowance","isCancelled","updatePoolInfo","pairBalanceCOOKStr","pairBalanceWETHStr","totalStakedStr","Promise","all","addr","pairCOOKBalance","decimals","pairWETHBalance","totalStakedBalance","poolInfoId","setInterval","clearInterval","updateUserInfo","userTotalStakedStr","userTotalUnstakableStr","userTotalRewardedStr","userTotalVestingStr","userTotalVestedStr","userTotalClaimedStr","uniAllowance","uniBalance","wethAllowance","wethBalance","userTotalStakedBalance","userTotalUnstakableBalance","userTotalLockedBalance","minus","userTotalRewardedBalance","userTotalVestingBalance","userTotalVestedBalance","userTotalClaimedBalance","userTotalInVestingBalance","userInfoId"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport BigNumber from 'bignumber.js';\nimport {\n  getStakeLockupDuration,\n  getTotalStaked,\n  getPoolBalanceOfStaked,\n  getPoolBalanceOfUnstakable,\n  getPoolBalanceOfRewarded,\n  getPoolBalanceOfVesting,\n  getPoolBalanceOfClaimable,\n  getPoolBalanceOfClaimed,\n  getTokenAllowance,\n  getTokenBalance\n} from '../../utils/infura';\nimport {COOK, UNI, WETH} from \"../../constants/tokens\";\nimport { toTokenUnitsBN } from '../../utils/number';\nimport Unstake from \"./Unstake\";\nimport Stake from \"./Stake\";\nimport Claim from \"./Claim\";\nimport Harvest from \"./Harvest\";\nimport PoolPageHeader from \"./Header\";\n\nfunction Pool({ user, poolAddress }: {user: string, poolAddress: string}) {\n  const { override, address } = useParams();\n  if (address) {\n    poolAddress = address;\n  }\n\n  const [pairBalanceCOOK, setPairBalanceCOOK] = useState(new BigNumber(0));\n  const [pairBalanceWETH, setPairBalanceWETH] = useState(new BigNumber(0));\n  const [stakeLockupDuration, setStakeLockupDuration] = useState(0);\n  const [totalStaked, setTotalStaked] = useState(new BigNumber(0));\n  const [userTotalStaked, setUserTotalStaked] = useState(new BigNumber(0));\n  const [userTotalUnstakable, setUserTotalUnstakable] = useState(new BigNumber(0));\n  const [userTotalLocked, setUserTotalLocked] = useState(new BigNumber(0));\n  const [userTotalRewarded, setUserTotalRewarded] = useState(new BigNumber(0));\n  const [userTotalInVesting, setUserInTotalVesting] = useState(new BigNumber(0));\n  const [userTotalVested, setUserTotalVested] = useState(new BigNumber(0));\n  const [userUNIAllowance, setUserUNIAllowance] = useState(new BigNumber(0));\n  const [userUNIBalance, setUserUNIBalance] = useState(new BigNumber(0));\n  const [userWETHBalance, setUserWETHBalance] = useState(new BigNumber(0));\n  const [userWETHAllowance, setUserWETHAllowance] = useState(new BigNumber(0));\n\n  //Update User balances\n  useEffect(() => {\n    if (poolAddress === '') {\n      setPairBalanceCOOK(new BigNumber(0));\n      setPairBalanceWETH(new BigNumber(0));\n      setTotalStaked(new BigNumber(0));\n      setUserTotalStaked(new BigNumber(0));\n      setUserTotalUnstakable(new BigNumber(0));\n      setUserTotalLocked(new BigNumber(0));\n      setUserTotalRewarded(new BigNumber(0));\n      setUserInTotalVesting(new BigNumber(0));\n      setUserTotalVested(new BigNumber(0));\n      setUserUNIAllowance(new BigNumber(0));\n      setUserUNIBalance(new BigNumber(0));\n      setUserWETHBalance(new BigNumber(0));\n      setUserWETHAllowance(new BigNumber(0));\n      return;\n    }\n\n    let isCancelled = false;\n\n    async function updatePoolInfo() {\n      const [\n        pairBalanceCOOKStr,\n        pairBalanceWETHStr,\n        stakeLockupDuration,\n        totalStakedStr\n      ] = await Promise.all([\n        getTokenBalance(COOK.addr, UNI.addr),\n        getTokenBalance(WETH.addr, UNI.addr),\n        getStakeLockupDuration(poolAddress),\n        getTotalStaked(poolAddress)\n      ]);\n\n      const pairCOOKBalance = toTokenUnitsBN(pairBalanceCOOKStr, COOK.decimals);\n      const pairWETHBalance = toTokenUnitsBN(pairBalanceWETHStr, WETH.decimals);\n      const totalStakedBalance = toTokenUnitsBN(totalStakedStr, UNI.decimals);\n\n      if (!isCancelled) {\n        setPairBalanceCOOK(new BigNumber(pairCOOKBalance));\n        setPairBalanceWETH(new BigNumber(pairWETHBalance));\n        setTotalStaked(new BigNumber(totalStakedBalance));\n        setStakeLockupDuration(stakeLockupDuration);\n      }\n    }\n\n    updatePoolInfo();\n    const poolInfoId = setInterval(updatePoolInfo, 1000);\n\n    if (user === '') {  \n      setUserTotalStaked(new BigNumber(0));\n      setUserTotalUnstakable(new BigNumber(0));\n      setUserTotalLocked(new BigNumber(0));\n      setUserTotalRewarded(new BigNumber(0));\n      setUserInTotalVesting(new BigNumber(0));\n      setUserTotalVested(new BigNumber(0));\n      setUserUNIAllowance(new BigNumber(0));\n      setUserUNIBalance(new BigNumber(0));\n      setUserWETHBalance(new BigNumber(0));\n      setUserWETHAllowance(new BigNumber(0));\n      return () => {\n        isCancelled = true;\n        clearInterval(poolInfoId);\n      };\n    }\n\n    async function updateUserInfo() {\n      const [\n        userTotalStakedStr,\n        userTotalUnstakableStr,\n        userTotalRewardedStr,\n        userTotalVestingStr,\n        userTotalVestedStr,\n        userTotalClaimedStr,\n        uniAllowance,\n        uniBalance,\n        wethAllowance,\n        wethBalance\n      ] = await Promise.all([\n        getPoolBalanceOfStaked(poolAddress, user),\n        getPoolBalanceOfUnstakable(poolAddress, user),\n        getPoolBalanceOfRewarded(poolAddress, user),\n        getPoolBalanceOfVesting(poolAddress, user),\n        getPoolBalanceOfClaimable(poolAddress, user),\n        getPoolBalanceOfClaimed(poolAddress, user),\n        getTokenAllowance(UNI.addr, user, poolAddress),\n        getTokenBalance(UNI.addr, user),\n        getTokenAllowance(WETH.addr, user, poolAddress),\n        getTokenBalance(WETH.addr, user),\n      ]);\n\n      const userTotalStakedBalance = toTokenUnitsBN(userTotalStakedStr, UNI.decimals);\n      const userTotalUnstakableBalance = toTokenUnitsBN(userTotalUnstakableStr, UNI.decimals);\n      const userTotalLockedBalance = (new BigNumber(userTotalStakedBalance)).minus(new BigNumber(userTotalUnstakableBalance));\n      const userTotalRewardedBalance = toTokenUnitsBN(userTotalRewardedStr, COOK.decimals);\n      const userTotalVestingBalance = toTokenUnitsBN(userTotalVestingStr, COOK.decimals);\n      const userTotalVestedBalance = toTokenUnitsBN(userTotalVestedStr, COOK.decimals);\n      const userTotalClaimedBalance = toTokenUnitsBN(userTotalClaimedStr, COOK.decimals);\n      const userTotalInVestingBalance = (new BigNumber(userTotalVestingBalance)).minus(new BigNumber(userTotalVestedBalance)).minus(new BigNumber(userTotalClaimedBalance));\n      const userUNIBalance = toTokenUnitsBN(uniBalance, UNI.decimals);\n      const userWETHBalance = toTokenUnitsBN(wethBalance, WETH.decimals);\n\n\n      if (!isCancelled) {\n        setUserTotalStaked(new BigNumber(userTotalStakedBalance));\n        setUserTotalUnstakable(new BigNumber(userTotalUnstakableBalance));\n        setUserTotalLocked(new BigNumber(userTotalLockedBalance));\n        setUserTotalRewarded(new BigNumber(userTotalRewardedBalance));\n        setUserInTotalVesting(new BigNumber(userTotalInVestingBalance));\n        setUserTotalVested(new BigNumber(userTotalVestedBalance));\n        setUserUNIAllowance(new BigNumber(uniAllowance));\n        setUserUNIBalance(new BigNumber(userUNIBalance));\n        setUserWETHAllowance(new BigNumber(wethAllowance));\n        setUserWETHBalance(new BigNumber(userWETHBalance));\n      }\n    }\n\n    updateUserInfo();\n    const userInfoId = setInterval(updateUserInfo, 1000);\n\n    // eslint-disable-next-line consistent-return\n    return () => {\n      isCancelled = true;\n      clearInterval(poolInfoId);\n      clearInterval(userInfoId);\n    };\n  }, [user, poolAddress]);\n\n  return (\n    <>\n      <PoolPageHeader\n        stakeLockupDuration={stakeLockupDuration}\n        totalStaked={totalStaked}\n      />\n\n      <Stake\n        user={user}\n        poolAddress={poolAddress}\n        balance={userUNIBalance}\n        allowance={userUNIAllowance}\n        staked={userTotalStaked}\n      />\n      <Unstake\n        user={user}\n        poolAddress={poolAddress}\n        unstakable={userTotalUnstakable}\n        locked={userTotalLocked}\n      />\n      <Harvest\n        user={user}\n        poolAddress={poolAddress}\n        userTotalRewarded={userTotalRewarded}\n        userTotalInVesting={userTotalInVesting}\n      />\n      <Claim\n        user={user}\n        poolAddress={poolAddress}\n        claimable={userTotalVested}\n        wethBalance={userWETHBalance}\n        wethAllowance={userWETHAllowance}\n        pairBalanceWETH={pairBalanceWETH}\n        pairBalanceCOOK={pairBalanceCOOK}\n      />\n    </>\n  );\n}\n\nexport default Pool;\n"]},"metadata":{},"sourceType":"module"}