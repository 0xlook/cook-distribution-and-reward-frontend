{"ast":null,"code":"var _jsxFileName = \"/Users/huanwen/Work/Cook/cook-frontend/src/components/Pool/index.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport _ from 'lodash';\nimport BigNumber from 'bignumber.js';\nimport { useViewport } from '@aragon/ui';\nimport { getPoolBalanceOfRewarded, getPoolBalanceOfVesting, getPoolBalanceOfClaimable, getPoolBalanceOfClaimed, getPoolBalanceOfStaked } from '../../utils/infura';\nimport { COOK } from \"../../constants/tokens\";\nimport { toTokenUnitsBN } from '../../utils/number';\nimport Claim from \"./Claim\";\nimport Harvest from \"./Harvest\";\nimport { Container, Row, Col } from 'react-grid-system';\nimport { BalanceBlock } from '../common/index';\n\nfunction Pool({\n  user,\n  poolAddress,\n  pools\n}) {\n  const {\n    override,\n    address\n  } = useParams();\n  const {\n    below\n  } = useViewport();\n\n  if (override) {\n    user = override;\n  }\n\n  if (address) {\n    poolAddress = address;\n  }\n\n  const [userTotalStaked, setUserTotalStaked] = useState(new BigNumber(0));\n  const [userTotalRewarded, setUserTotalRewarded] = useState(new BigNumber(0));\n  const [userTotalInVesting, setUserInTotalVesting] = useState(new BigNumber(0));\n  const [userTotalVested, setUserTotalVested] = useState(new BigNumber(0)); //Update User balances\n\n  useEffect(() => {\n    if (poolAddress === '') {\n      setUserTotalStaked(new BigNumber(0));\n      setUserTotalRewarded(new BigNumber(0));\n      setUserInTotalVesting(new BigNumber(0));\n      setUserTotalVested(new BigNumber(0));\n      return;\n    }\n\n    let isCancelled = false; // async function updatePoolInfo() {\n    //   const [\n    //     pairBalanceCOOKStr,\n    //     pairBalanceWETHStr,\n    //   ] = await Promise.all([\n    //     getTokenBalance(COOK.addr, UNI.addr),\n    //     getTokenBalance(WETH.addr, UNI.addr),\n    //   ]);\n    // }\n    // updatePoolInfo();\n    // const poolInfoId = setInterval(updatePoolInfo, 15000);\n\n    if (user === '') {\n      setUserTotalStaked(new BigNumber(0));\n      setUserTotalRewarded(new BigNumber(0));\n      setUserInTotalVesting(new BigNumber(0));\n      setUserTotalVested(new BigNumber(0));\n      return () => {\n        isCancelled = true; // clearInterval(poolInfoId);\n      };\n    }\n\n    async function updateUserInfo() {\n      const [userTotalStakedStr, userTotalRewardedStr, userTotalVestingStr, userTotalVestedStr, userTotalClaimedStr] = await Promise.all([getPoolBalanceOfStaked(poolAddress, user), getPoolBalanceOfRewarded(poolAddress, user), getPoolBalanceOfVesting(poolAddress, user), getPoolBalanceOfClaimable(poolAddress, user), getPoolBalanceOfClaimed(poolAddress, user)]);\n      const userTotalStakedBalance = toTokenUnitsBN(userTotalStakedStr, COOK.decimals);\n      const userTotalRewardedBalance = toTokenUnitsBN(userTotalRewardedStr, COOK.decimals);\n      const userTotalVestingBalance = toTokenUnitsBN(userTotalVestingStr, COOK.decimals);\n      const userTotalVestedBalance = toTokenUnitsBN(userTotalVestedStr, COOK.decimals);\n      const userTotalClaimedBalance = toTokenUnitsBN(userTotalClaimedStr, COOK.decimals);\n      const userTotalInVestingBalance = new BigNumber(userTotalVestingBalance).minus(new BigNumber(userTotalVestedBalance)).minus(new BigNumber(userTotalClaimedBalance));\n\n      if (!isCancelled) {\n        setUserTotalRewarded(new BigNumber(userTotalRewardedBalance));\n        setUserInTotalVesting(new BigNumber(userTotalInVestingBalance));\n        setUserTotalVested(new BigNumber(userTotalVestedBalance));\n        setUserTotalStaked(new BigNumber(userTotalStakedBalance));\n      }\n    }\n\n    updateUserInfo();\n    const userInfoId = setInterval(updateUserInfo, 1500); // eslint-disable-next-line consistent-return\n\n    return () => {\n      isCancelled = true; // clearInterval(poolInfoId);\n\n      clearInterval(userInfoId);\n    };\n  }, [user, poolAddress]);\n  const poolList = [_.find(pools, {\n    'address': poolAddress\n  })];\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    style: {\n      textAlign: \"left\",\n      marginTop: 30\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    xs: 12,\n    lg: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(BalanceBlock, {\n    asset: \"Total Staked\",\n    balance: userTotalStaked,\n    suffix: \"UNI-V2\",\n    type: \"block\",\n    size: below('medium') ? \"30px\" : \"45px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    xs: 12,\n    md: 4,\n    lg: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(BalanceBlock, {\n    asset: \"To be Vested Tokens\",\n    balance: userTotalRewarded,\n    suffix: \"Cook\",\n    type: \"block\",\n    size: \"30px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    xs: 12,\n    md: 4,\n    lg: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(BalanceBlock, {\n    asset: \"Vesting Tokens\",\n    balance: userTotalInVesting,\n    suffix: \"Cook\",\n    type: \"block\",\n    size: \"30px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    xs: 12,\n    md: 4,\n    lg: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(BalanceBlock, {\n    asset: \"Vested Tokens\",\n    balance: userTotalVested,\n    suffix: \"Cook\",\n    type: \"block\",\n    size: \"30px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    xs: 6,\n    lg: 2,\n    style: {\n      margin: 'auto',\n      padding: 5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Harvest, {\n    user: user,\n    pools: poolList,\n    poolAddress: poolAddress,\n    userTotalRewarded: userTotalRewarded,\n    userTotalInVesting: userTotalInVesting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    xs: 6,\n    lg: 2,\n    style: {\n      margin: 'auto',\n      padding: 5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Claim, {\n    user: user,\n    pools: poolList,\n    poolAddress: poolAddress,\n    claimable: userTotalVested,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 11\n    }\n  }))));\n}\n\nexport default Pool;","map":{"version":3,"sources":["/Users/huanwen/Work/Cook/cook-frontend/src/components/Pool/index.tsx"],"names":["React","useState","useEffect","useParams","_","BigNumber","useViewport","getPoolBalanceOfRewarded","getPoolBalanceOfVesting","getPoolBalanceOfClaimable","getPoolBalanceOfClaimed","getPoolBalanceOfStaked","COOK","toTokenUnitsBN","Claim","Harvest","Container","Row","Col","BalanceBlock","Pool","user","poolAddress","pools","override","address","below","userTotalStaked","setUserTotalStaked","userTotalRewarded","setUserTotalRewarded","userTotalInVesting","setUserInTotalVesting","userTotalVested","setUserTotalVested","isCancelled","updateUserInfo","userTotalStakedStr","userTotalRewardedStr","userTotalVestingStr","userTotalVestedStr","userTotalClaimedStr","Promise","all","userTotalStakedBalance","decimals","userTotalRewardedBalance","userTotalVestingBalance","userTotalVestedBalance","userTotalClaimedBalance","userTotalInVestingBalance","minus","userInfoId","setInterval","clearInterval","poolList","find","textAlign","marginTop","margin","padding"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport _ from 'lodash'\nimport BigNumber from 'bignumber.js';\nimport {\n  useViewport\n} from '@aragon/ui';\nimport {\n  getPoolBalanceOfRewarded,\n  getPoolBalanceOfVesting,\n  getPoolBalanceOfClaimable,\n  getPoolBalanceOfClaimed,\n  getPoolBalanceOfStaked\n} from '../../utils/infura';\nimport { COOK, UNI, WETH } from \"../../constants/tokens\";\nimport { toTokenUnitsBN } from '../../utils/number';\nimport Claim from \"./Claim\";\nimport Harvest from \"./Harvest\";\n\nimport { Container, Row, Col } from 'react-grid-system';\nimport Span from \"../common/Span\";\nimport {\n  BalanceBlock\n} from '../common/index';\n\n\ntype PoolProps = {\n  pool: string, lockedUp: number, reward: BigNumber, staked: BigNumber, totalStaked: BigNumber\n};\n\nfunction Pool({ user, poolAddress, pools }: { user: string, poolAddress: string, pools: Array<PoolProps> }) {\n  const { override, address } = useParams();\n  const { below } = useViewport()\n  if (override) {\n    user = override;\n  }\n  if (address) {\n    poolAddress = address;\n  }\n\n  const [userTotalStaked, setUserTotalStaked] = useState(new BigNumber(0));\n  const [userTotalRewarded, setUserTotalRewarded] = useState(new BigNumber(0));\n  const [userTotalInVesting, setUserInTotalVesting] = useState(new BigNumber(0));\n  const [userTotalVested, setUserTotalVested] = useState(new BigNumber(0));\n\n\n  //Update User balances\n  useEffect(() => {\n    if (poolAddress === '') {\n      setUserTotalStaked(new BigNumber(0));\n      setUserTotalRewarded(new BigNumber(0));\n      setUserInTotalVesting(new BigNumber(0));\n      setUserTotalVested(new BigNumber(0));\n      return;\n    }\n\n    let isCancelled = false;\n\n    // async function updatePoolInfo() {\n    //   const [\n    //     pairBalanceCOOKStr,\n    //     pairBalanceWETHStr,\n    //   ] = await Promise.all([\n    //     getTokenBalance(COOK.addr, UNI.addr),\n    //     getTokenBalance(WETH.addr, UNI.addr),\n    //   ]);\n\n    // }\n\n    // updatePoolInfo();\n    // const poolInfoId = setInterval(updatePoolInfo, 15000);\n\n    if (user === '') {\n      setUserTotalStaked(new BigNumber(0));\n      setUserTotalRewarded(new BigNumber(0));\n      setUserInTotalVesting(new BigNumber(0));\n      setUserTotalVested(new BigNumber(0));\n      return () => {\n        isCancelled = true;\n        // clearInterval(poolInfoId);\n      };\n    }\n\n    async function updateUserInfo() {\n      const [\n        userTotalStakedStr,\n        userTotalRewardedStr,\n        userTotalVestingStr,\n        userTotalVestedStr,\n        userTotalClaimedStr,\n\n      ] = await Promise.all([\n        getPoolBalanceOfStaked(poolAddress, user),\n        getPoolBalanceOfRewarded(poolAddress, user),\n        getPoolBalanceOfVesting(poolAddress, user),\n        getPoolBalanceOfClaimable(poolAddress, user),\n        getPoolBalanceOfClaimed(poolAddress, user),\n      ]);\n      const userTotalStakedBalance = toTokenUnitsBN(userTotalStakedStr, COOK.decimals);\n      const userTotalRewardedBalance = toTokenUnitsBN(userTotalRewardedStr, COOK.decimals);\n      const userTotalVestingBalance = toTokenUnitsBN(userTotalVestingStr, COOK.decimals);\n      const userTotalVestedBalance = toTokenUnitsBN(userTotalVestedStr, COOK.decimals);\n      const userTotalClaimedBalance = toTokenUnitsBN(userTotalClaimedStr, COOK.decimals);\n      const userTotalInVestingBalance = (new BigNumber(userTotalVestingBalance)).minus(new BigNumber(userTotalVestedBalance)).minus(new BigNumber(userTotalClaimedBalance));\n\n\n      if (!isCancelled) {\n        setUserTotalRewarded(new BigNumber(userTotalRewardedBalance));\n        setUserInTotalVesting(new BigNumber(userTotalInVestingBalance));\n        setUserTotalVested(new BigNumber(userTotalVestedBalance));\n        setUserTotalStaked(new BigNumber(userTotalStakedBalance));\n      }\n    }\n\n    updateUserInfo();\n    const userInfoId = setInterval(updateUserInfo, 1500);\n\n    // eslint-disable-next-line consistent-return\n    return () => {\n      isCancelled = true;\n      // clearInterval(poolInfoId);\n      clearInterval(userInfoId);\n    };\n  }, [user, poolAddress]);\n\n  const poolList = [_.find(pools, { 'address': poolAddress })]\n\n  return (\n    <Container>\n\n\n      <Row style={{ textAlign: \"left\", marginTop: 30 }}>\n        <Col xs={12} lg={12} >\n          <BalanceBlock asset=\"Total Staked\" balance={userTotalStaked} suffix={\"UNI-V2\"} type={\"block\"} size={below('medium') ? \"30px\" : \"45px\"} />\n        </Col>\n        <Col xs={12} md={4} lg={3} >\n          <BalanceBlock asset=\"To be Vested Tokens\" balance={userTotalRewarded} suffix={\"Cook\"} type={\"block\"} size=\"30px\" />\n        </Col>\n        <Col xs={12} md={4} lg={3} >\n          <BalanceBlock asset=\"Vesting Tokens\" balance={userTotalInVesting} suffix={\"Cook\"} type={\"block\"} size=\"30px\" />\n        </Col>\n        <Col xs={12} md={4} lg={2} >\n          <BalanceBlock asset=\"Vested Tokens\" balance={userTotalVested} suffix={\"Cook\"} type={\"block\"} size=\"30px\" />\n        </Col>\n\n\n\n        <Col xs={6} lg={2} style={{ margin: 'auto', padding: 5 }}>\n          <Harvest\n            user={user}\n            pools={poolList}\n            poolAddress={poolAddress}\n            userTotalRewarded={userTotalRewarded}\n            userTotalInVesting={userTotalInVesting}\n          />\n        </Col>\n        <Col xs={6} lg={2} style={{ margin: 'auto', padding: 5 }}>\n          <Claim\n            user={user}\n            pools={poolList}\n            poolAddress={poolAddress}\n            claimable={userTotalVested}\n          />\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default Pool;\n"]},"metadata":{},"sourceType":"module"}